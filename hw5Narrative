Robert Wilson
HW5 Narrative
CS451

Question 1)

In order to properly solve question 1, it is not enough to simply modify
JLiteralLong.  There is also a requirement for longs to be dealt with for
castings, arrays, and binary operations.  Therefore, the following classes will
need to be modified:

a) JPlusAssign in JAssignment
b) JArrayExpression
c) JArrayInitializer 
d) JCastOp
e) Type
f) JLiteralLong
g) JBinaryExpression
h) JAssign (JVariable)

A good rule of thumb for dealing with these classes is to see where INT is used
and then deal with LONG in a similar manner.  First a test should be built.
However, unlike in previous assignments, it can be placed in the pass folder
because it should be able to eventually run.

First, it makes sense to start with a simple test to make sure that
JLiteralLong runs properly:

package pass;

import java.lang.System;

public class Long {
	public static void main(String[] args){
		//int a = 1;
		System.out.println(2L);
	}
}

Note the following:

http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.2

BaseType Character	Type	Interpretation
B	byte	signed byte
C	char	Unicode character code point in the Basic Multilingual Plane, en		coded with UTF-16
D	double	double-precision floating-point value
F	float	single-precision floating-point value
I	int	integer
J	long	long integer
L ClassName ;	reference	an instance of class ClassName
S	short	signed short

So we can make the following change in Type:

private static String descriptorFor(Class<?> cls) {
        return cls == null ? "V" : cls == void.class ? "V"
                : cls.isArray() ? "[" + descriptorFor(cls.getComponentType())
                        : cls.isPrimitive() ? (cls == int.class ? "I"
                                : cls == char.class ? "C"
                               	: cls == float.class ? "F"//modification
                        	: cls == long.class ? "J"//modification
                                    : cls == double.class ? "D"//modification
                                        : cls == boolean.class ? "Z" : "?")
                                : "L" + cls.getName().replace('.', '/') + ";";
    }
Z	boolean	true or false
[	reference	one array dimension

Along with the following change in JLiteralLong

public JExpression analyze(Context context) {
        type = Type.LONG;
        return this;
    }

which gives the following result:

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\Long.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Long.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>pass.Long</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>Long</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Long" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
              </Entries>
            </LocalContext>
            <JStatementExpression line="8">
              <JMessageExpression line="8" name="println">
                <Target>
                  <JFieldSelection line="8" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralLong line="8" type="long" value="2L"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

Codegen can be updated based on the mechanisms available in CLEmitter as
follows:

public void codegen(CLEmitter output) {
    	//remove the trailing L
    	//text.replace(text.charAt(text.length() - 1), '');
    	text = text.substring(0, text.length() - 1 );
    	//System.out.println("in codgen " + text);
        long i = Long.parseLong(text);
        //output.addLDCInstruction(i);
        //System.out.println("in codgen " + i);
        //switch (i) {
        if ( i == 0L) {
            output.addNoArgInstruction(LCONST_0);
        }
        else if ( i == 1L) {
            output.addNoArgInstruction(LCONST_1);
        }
//        else if ((int) i == 2) {//no such thing as LCont2
//            output.addNoArgInstruction(LCONST_2);
//        }
//        else if ((int) i == 3) {
//            output.addNoArgInstruction(ICONST_3);
//        }
//        else if ((int) i == 4) {
//            output.addNoArgInstruction(ICONST_4);
//        }
//        else if ((int) i == 5) {
//            output.addNoArgInstruction(ICONST_5);
//        }
//        else {
//            if ((int) i >= 0 && (int) i <= 127) {
//                output.addOneArgInstruction(BIPUSH, (int) i);
//            } else if ((int) i >= 128 && (int) i <= 32767) {
//                output.addOneArgInstruction(SIPUSH, (int) i);
//            } else if ((int) i >= 32768 && (int) i <=  2147483647 ){//it can fit into an int
//                output.addLDCInstruction((int) i);
//            } 
            else {//it has to be a long 
            	output.addLDCInstruction(i);
            }//see CLEMiitter line 1756 	
//        }
    }


The test is then updated:

package pass;

import java.lang.System;

public class Long {
	public static void main(String[] args){
		//int a = 1;
		System.out.println(1L);
		System.out.println(127l);//last letter is L
		System.out.println(32767L);
		System.out.println(2147483647l);//last letter is L
		System.out.println(9223372036854775807L);
	}
}

And the results are as follows:

BUILD SUCCESSFUL
Total time: 5 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Long.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->cd classes

C:\Users\bwils_000\Desktop\eclipse projects\j--\classes>java pass.Long
1
127
32767
2147483647
9223372036854775807

C:\Users\bwils_000\Desktop\eclipse projects\j--\classes>javap -verbose pass.Long
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/classes/pass/Long.class
  Last modified Nov 10, 2016; size 376 bytes
  MD5 checksum 94c620f46f85774ba179f4c07ab18f29
public class pass.Long
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long
   #2 = Class              #1             // pass/Long
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               java/io/PrintStream
  #19 = Class              #18            // java/io/PrintStream
  #20 = Utf8               println
  #21 = Utf8               (J)V
  #22 = NameAndType        #20:#21        // println:(J)V
  #23 = Methodref          #19.#22        // java/io/PrintStream.println:(J)V
  #24 = Long               127l
  #26 = Long               32767l
  #28 = Long               2147483647l
  #30 = Long               9223372036854775807l
{
  public pass.Long();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=1, args_size=1
         0: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: lconst_1
         4: invokevirtual #23                 // Method java/io/PrintStream.println:(J)V
         7: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        10: ldc2_w        #24                 // long 127l
        13: invokevirtual #23                 // Method java/io/PrintStream.println:(J)V
        16: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        19: ldc2_w        #26                 // long 32767l
        22: invokevirtual #23                 // Method java/io/PrintStream.println:(J)V
        25: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        28: ldc2_w        #28                 // long 2147483647l
        31: invokevirtual #23                 // Method java/io/PrintStream.println:(J)V
        34: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        37: ldc2_w        #30                 // long 9223372036854775807l
        40: invokevirtual #23                 // Method java/io/PrintStream.println:(J)V
        43: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j--\classes>

Next, inside JBinaryExpression modifications of the ops for +, -, *, /, %, &,
^, an | must have modifications similar to as follows:

class JPlusOp extends JBinaryExpression {

    /**
     * Construct an AST node for an addition expression given its line number,
     * and the lhs and rhs operands.
     * 
     * @param line
     *            line in which the addition expression occurs in the source
     *            file.
     * @param lhs
     *            the lhs operand.
     * @param rhs
     *            the rhs operand.
     */

    public JPlusOp(int line, JExpression lhs, JExpression rhs) {
        super(line, "+", lhs, rhs);
    }

    /**
     * Analysis involves first analyzing the operands. If this is a string
     * concatenation, we rewrite the subtree to make that explicit (and analyze
     * that). Otherwise we check the types of the addition operands and compute
     * the result type.
     * 
     * @param context
     *            context in which names are resolved.
     * @return the analyzed (and possibly rewritten) AST subtree.
     */

    public JExpression analyze(Context context) {
        lhs = (JExpression) lhs.analyze(context);
        rhs = (JExpression) rhs.analyze(context);
        if (lhs.type() == Type.STRING || rhs.type() == Type.STRING) {
            return (new JStringConcatenationOp(line, lhs, rhs))
                    .analyze(context);
        } else if (lhs.type() == Type.INT && rhs.type() == Type.INT) {
            type = Type.INT;
        } else if (lhs.type() == Type.LONG && rhs.type() == Type.LONG) {
            type = Type.LONG;
        } else {
            type = Type.ANY;
            JAST.compilationUnit.reportSemanticError(line(),
                    "Invalid operand types for +");
        }
        return this;
    }

    /**
     * Any string concatenation has been rewritten as a JStringConcatenationOp
     * (in analyze()), so code generation here involves simply generating code
     * for loading the operands onto the stack and then generating the
     * appropriate add instruction.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        if (type == Type.INT) {
            lhs.codegen(output);
            rhs.codegen(output);
            output.addNoArgInstruction(IADD);
        } else if (type == Type.LONG) {
            lhs.codegen(output);
            rhs.codegen(output);
            output.addNoArgInstruction(LADD);
        }
    }

}

Note in the codegenStore method of JVariable:

else {
                // Primitive types
                if (type == Type.INT || type == Type.BOOLEAN
                        || type == Type.CHAR) {
                    switch (offset) {
                    case 0:
                        output.addNoArgInstruction(ISTORE_0);
                        break;

There is no reference to Type.LONG

Further, in the codegen method of JVariable:

else {
                // Primitive types
                if (type == Type.INT || type == Type.BOOLEAN
                        || type == Type.CHAR) {
                    switch (offset) {
                    case 0:
                        output.addNoArgInstruction(ILOAD_0);
                        break;

There is also no reference to Type.LONG.

Both of these need to be modified so that longs can be stored and loaded.

Modify the test as follows:

public class Long {
	public static void main(String[] args){
		int a = 32768;
		long b = 2L;
		System.out.println(a);
		System.out.println(b);

And the following results are achieved:

BUILD SUCCESSFUL
Total time: 6 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Long.java
inside JAssignment/JAssignOp/codegen
Inside JVariable/CodegenStore
inside JAssignment/JAssignOp/codegen
Inside JVariable/CodegenStore

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Long
32768
2

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Long
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Long.class
  Last modified Nov 12, 2016; size 349 bytes
  MD5 checksum 8a5f6fc2a46def120ffe1ce800d7cfd5
public class pass.Long
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long
   #2 = Class              #1             // pass/Long
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Integer            32768
  #13 = Long               2l
  #15 = Utf8               java/lang/System
  #16 = Class              #15            // java/lang/System
  #17 = Utf8               out
  #18 = Utf8               Ljava/io/PrintStream;
  #19 = NameAndType        #17:#18        // out:Ljava/io/PrintStream;
  #20 = Fieldref           #16.#19        // java/lang/System.out:Ljava/io/PrintStream;
  #21 = Utf8               java/io/PrintStream
  #22 = Class              #21            // java/io/PrintStream
  #23 = Utf8               println
  #24 = Utf8               (I)V
  #25 = NameAndType        #23:#24        // println:(I)V
  #26 = Methodref          #22.#25        // java/io/PrintStream.println:(I)V
  #27 = Utf8               (J)V
  #28 = NameAndType        #23:#27        // println:(J)V
  #29 = Methodref          #22.#28        // java/io/PrintStream.println:(J)V
{
  public pass.Long();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=4, args_size=1
         0: ldc           #12                 // int 32768
         2: istore_1
         3: ldc2_w        #13                 // long 2l
         6: lstore_2
         7: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        10: iload_1
        11: invokevirtual #26                 // Method java/io/PrintStream.println:(I)V
        14: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        17: lload_2
        18: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        21: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

In order for casting to work so that longs can be converted to and from
appropriate types, it is necessary to make alterations to the conversions
object in JCastOp.

The following changes are made to the converter object:

        // Populate the table

        put(Type.CHAR, Type.INT, Converter.Identity);
        put(Type.INT, Type.CHAR, new I2C());
        //added
        put(Type.INT, Type.LONG, new I2L());
        put(Type.LONG, Type.INT, new L2I());

And then following classes are added to the bottom of the page:

class I2L implements Converter {

    /**
     * @inheritDoc
     */

    public void codegen(CLEmitter output) {
        output.addNoArgInstruction(I2L);
    }

}

class L2I implements Converter {

    /**
     * @inheritDoc
     */

    public void codegen(CLEmitter output) {
        output.addNoArgInstruction(L2I);
    }

}

Modify the test so that it executes the following:

		int ai = 32769;
		//ai = (int) ab;
//		char d = (char) ai;
//		ai = (int) d;
		//ab = 3L - 2L;
		long c = (long) ai;
		System.out.println(c);
		ai = (int) c;
		System.out.println(c);

The results are as follows:

BUILD SUCCESSFUL
Total time: 6 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Long.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Long
32769
32769

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Long
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Long.class
  Last modified Nov 12, 2016; size 327 bytes
  MD5 checksum 9da438fdc1446c33efe7609af5f33d95
public class pass.Long
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long
   #2 = Class              #1             // pass/Long
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Integer            32769
  #13 = Utf8               java/lang/System
  #14 = Class              #13            // java/lang/System
  #15 = Utf8               out
  #16 = Utf8               Ljava/io/PrintStream;
  #17 = NameAndType        #15:#16        // out:Ljava/io/PrintStream;
  #18 = Fieldref           #14.#17        // java/lang/System.out:Ljava/io/PrintStream;
  #19 = Utf8               java/io/PrintStream
  #20 = Class              #19            // java/io/PrintStream
  #21 = Utf8               println
  #22 = Utf8               (J)V
  #23 = NameAndType        #21:#22        // println:(J)V
  #24 = Methodref          #20.#23        // java/io/PrintStream.println:(J)V
{
  public pass.Long();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=5, args_size=1
         0: lconst_0
         1: lstore_1
         2: ldc           #12                 // int 32769
         4: istore_2
         5: iload_2
         6: i2l
         7: lstore_3
         8: getstatic     #18                 // Field java/lang/System.out:Ljava/io/PrintStream;
        11: lload_3
        12: invokevirtual #24                 // Method java/io/PrintStream.println:(J)V
        15: lload_3
        16: l2i
        17: istore_2
        18: getstatic     #18                 // Field java/lang/System.out:Ljava/io/PrintStream;
        21: lload_3
        22: invokevirtual #24                 // Method java/io/PrintStream.println:(J)V
        25: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

For array, a modification to JArrayExpression and JArrrayInitializer needs to
be made respectively,

    public void codegen(CLEmitter output) {
        theArray.codegen(output);
        indexExpr.codegen(output);
        if (type == Type.INT) {
            output.addNoArgInstruction(IALOAD);
	} else if (type == Type.BOOLEAN) {
            output.addNoArgInstruction(BALOAD);
	} else if (type == Type.LONG) {//added
        output.addNoArgInstruction(LALOAD);
	} else if (type == Type.CHAR) {
            output.addNoArgInstruction(CALOAD);
        } else if (!type.isPrimitive()) {
            output.addNoArgInstruction(AALOAD);
        }
    }

in codegen

            // Code to store the initial value in the array
	    if (componentType == Type.INT) {
		output.addNoArgInstruction(IASTORE);
	    } else if (componentType == Type.BOOLEAN) {
		output.addNoArgInstruction(BASTORE);
	    } else if (componentType == Type.LONG) {
		output.addNoArgInstruction(LASTORE);
	    } else if (componentType == Type.CHAR) {
		output.addNoArgInstruction(CASTORE);
	    } else if (!componentType.isPrimitive()) {
		output.addNoArgInstruction(AASTORE);
	    }
        }
    }

Further, in JArrayExpression,

    public void codegenStore(CLEmitter output) {
	if (type == Type.INT) {
	    output.addNoArgInstruction(IASTORE);
	} else if (type == Type.BOOLEAN) {
	    output.addNoArgInstruction(BASTORE);
	} else if (type == Type.LONG) {//added
	    output.addNoArgInstruction(LASTORE);

The tests and results are as follows:

BUILD SUCCESSFUL
Total time: 4 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  tests\pass\Long.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Long
63
63
63

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Long
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Long.class
  Last modified Nov 13, 2016; size 379 bytes
  MD5 checksum 67b4c1b7b95ae979936f848c96de2311
public class pass.Long
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long
   #2 = Class              #1             // pass/Long
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Long               63l
  #14 = Utf8               java/lang/System
  #15 = Class              #14            // java/lang/System
  #16 = Utf8               out
  #17 = Utf8               Ljava/io/PrintStream;
  #18 = NameAndType        #16:#17        // out:Ljava/io/PrintStream;
  #19 = Fieldref           #15.#18        // java/lang/System.out:Ljava/io/PrintStream;
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (J)V
  #24 = NameAndType        #22:#23        // println:(J)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(J)V
  #26 = Utf8               (I)V
  #27 = NameAndType        #22:#26        // println:(I)V
  #28 = Methodref          #21.#27        // java/io/PrintStream.println:(I)V
{
  public pass.Long();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=4, args_size=1
         0: iconst_1
         1: newarray       long
         3: dup
         4: iconst_0
         5: ldc2_w        #12                 // long 63l
         8: lastore
         9: astore_1
        10: getstatic     #19                 // Field java/lang/System.out:Ljava/io/PrintStream;
        13: aload_1
        14: iconst_0
        15: laload
        16: invokevirtual #25                 // Method java/io/PrintStream.println:(J)V
        19: iconst_3
        20: newarray       long
        22: astore_2
        23: aload_2
        24: iconst_0
        25: ldc2_w        #12                 // long 63l
        28: lastore
        29: getstatic     #19                 // Field java/lang/System.out:Ljava/io/PrintStream;
        32: aload_2
        33: iconst_0
        34: laload
        35: invokevirtual #25                 // Method java/io/PrintStream.println:(J)V
        38: iconst_3
        39: newarray       int
        41: astore_3
        42: aload_3
        43: iconst_0
        44: bipush        63
        46: iastore
        47: getstatic     #19                 // Field java/lang/System.out:Ljava/io/PrintStream;
        50: aload_3
        51: iconst_0
        52: iaload
        53: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
        56: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j--> 

In order to make sure that the proper offset is created when a new long
variable is declared an additional offset incrementation needs to be created
in the JVariableDeclaration analyze method:

the modification and test result is as follows:

 }
            if (decl.type() == Type.LONG) {//ADDED
            	((LocalContext) context).nextOffset();
            }
        }

BUILD SUCCESSFUL
Total time: 5 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  tests\pass\Long.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Long
9

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Long
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Long.class
  Last modified Nov 13, 2016; size 344 bytes
  MD5 checksum 5fd1114cf8e1559c38fd9dce1f50e29d
public class pass.Long
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long
   #2 = Class              #1             // pass/Long
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Long               5l
  #14 = Long               4l
  #16 = Utf8               java/lang/System
  #17 = Class              #16            // java/lang/System
  #18 = Utf8               out
  #19 = Utf8               Ljava/io/PrintStream;
  #20 = NameAndType        #18:#19        // out:Ljava/io/PrintStream;
  #21 = Fieldref           #17.#20        // java/lang/System.out:Ljava/io/PrintStream;
  #22 = Utf8               java/io/PrintStream
  #23 = Class              #22            // java/io/PrintStream
  #24 = Utf8               println
  #25 = Utf8               (J)V
  #26 = NameAndType        #24:#25        // println:(J)V
  #27 = Methodref          #23.#26        // java/io/PrintStream.println:(J)V
{
  public pass.Long();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=9, args_size=1
         0: iconst_3
         1: istore_1
         2: ldc2_w        #12                 // long 5l
         5: lstore_2
         6: bipush        6
         8: istore        4
        10: ldc2_w        #14                 // long 4l
        13: lstore        5
        15: lload_2
        16: lload         5
        18: ladd
        19: lstore        7
        21: getstatic     #21                 // Field java/lang/System.out:Ljava/io/PrintStream;
        24: lload         7
        26: invokevirtual #27                 // Method java/io/PrintStream.println:(J)V
        29: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

Then several changes need to be made to JBinaryExpression so that
multiplication, subtraction and addition is feasible,

class JPlusOp extends JBinaryExpression {

    /**
     * Construct an AST node for an addition expression given its line number,
     * and the lhs and rhs operands.
     * 
     * @param line
     *            line in which the addition expression occurs in the source
     *            file.
     * @param lhs
     *            the lhs operand.
     * @param rhs
     *            the rhs operand.
     */

    public JPlusOp(int line, JExpression lhs, JExpression rhs) {
        super(line, "+", lhs, rhs);
    }

    /**
     * Analysis involves first analyzing the operands. If this is a string
     * concatenation, we rewrite the subtree to make that explicit (and analyze
     * that). Otherwise we check the types of the addition operands and compute
     * the result type.
     * 
     * @param context
     *            context in which names are resolved.
     * @return the analyzed (and possibly rewritten) AST subtree.
     */

    public JExpression analyze(Context context) {
        lhs = (JExpression) lhs.analyze(context);
        rhs = (JExpression) rhs.analyze(context);
        if (lhs.type() == Type.STRING || rhs.type() == Type.STRING) {
            return (new JStringConcatenationOp(line, lhs, rhs))
                    .analyze(context);
        } else if (lhs.type() == Type.INT && rhs.type() == Type.INT) {
            type = Type.INT;
        } else if (lhs.type() == Type.LONG && rhs.type() == Type.LONG) {
            type = Type.LONG;
        } else {
            type = Type.ANY;
            JAST.compilationUnit.reportSemanticError(line(),
                    "Invalid operand types for +");
        }
        return this;
    }

    /**
     * Any string concatenation has been rewritten as a JStringConcatenationOp
     * (in analyze()), so code generation here involves simply generating code
     * for loading the operands onto the stack and then generating the
     * appropriate add instruction.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        if (type == Type.INT) {
            lhs.codegen(output);
            rhs.codegen(output);
            output.addNoArgInstruction(IADD);
        } else if (type == Type.LONG) {
            lhs.codegen(output);
            rhs.codegen(output);
            output.addNoArgInstruction(LADD);
        }
    }

}

/**
 * The AST node for a subtraction (-) expression.
 */

class JSubtractOp extends JBinaryExpression {

    /**
     * Construct an AST node for a subtraction expression given its line number,
     * and lhs and rhs operands.
     * 
     * @param line
     *            line in which the subtraction expression occurs in the source
     *            file.
     * @param lhs
     *            the lhs operand.
     * @param rhs
     *            the rhs operand.
     */

    public JSubtractOp(int line, JExpression lhs, JExpression rhs) {
        super(line, "-", lhs, rhs);
    }

    /**
     * Analyzing the - operation involves analyzing its operands, checking
     * types, and determining the result type.
     * 
     * @param context
     *            context in which names are resolved.
     * @return the analyzed (and possibly rewritten) AST subtree.
     */

    public JExpression analyze(Context context) {
        lhs = (JExpression) lhs.analyze(context);
        rhs = (JExpression) rhs.analyze(context);
        if (lhs.type() == Type.INT && rhs.type() == Type.INT) {
            type = Type.INT;
        } else if (lhs.type() == Type.LONG && rhs.type() == Type.LONG) {
            type = Type.LONG;
        }
//        lhs.type().mustMatchExpected(line(), Type.INT);
//        rhs.type().mustMatchExpected(line(), Type.INT);
//        type = Type.INT;
        return this;
    }

    /**
     * Generating code for the - operation involves generating code for the two
     * operands, and then the subtraction instruction.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
    	if (type == Type.INT) {
            lhs.codegen(output);
            rhs.codegen(output);
            output.addNoArgInstruction(ISUB);
        } else if (type == Type.LONG) {
            lhs.codegen(output);
            rhs.codegen(output);
            output.addNoArgInstruction(LSUB);
        }
//        lhs.codegen(output);
//        rhs.codegen(output);
//        output.addNoArgInstruction(ISUB);
    }

}

/**
 * The AST node for a multiplication (*) expression.
 */

class JMultiplyOp extends JBinaryExpression {

    /**
     * Construct an AST for a multiplication expression given its line number,
     * and the lhs and rhs operands.
     * 
     * @param line
     *            line in which the multiplication expression occurs in the
     *            source file.
     * @param lhs
     *            the lhs operand.
     * @param rhs
     *            the rhs operand.
     */

    public JMultiplyOp(int line, JExpression lhs, JExpression rhs) {
        super(line, "*", lhs, rhs);
    }

    /**
     * Analyzing the * operation involves analyzing its operands, checking
     * types, and determining the result type.
     * 
     * @param context
     *            context in which names are resolved.
     * @return the analyzed (and possibly rewritten) AST subtree.
     */

    public JExpression analyze(Context context) {
        lhs = (JExpression) lhs.analyze(context);
        rhs = (JExpression) rhs.analyze(context);
        if (lhs.type() == Type.INT && rhs.type() == Type.INT) {
//        	lhs.type().mustMatchExpected(line(), Type.INT);
//            rhs.type().mustMatchExpected(line(), Type.INT);
            type = Type.INT;
        } else if (lhs.type() == Type.LONG && rhs.type() == Type.LONG) {
//        	lhs.type().mustMatchExpected(line(), Type.LONG);
//            rhs.type().mustMatchExpected(line(), Type.LONG);
            type = Type.LONG;
        }
        //type = Type.INT;
        return this;
    }

    /**
     * Generating code for the * operation involves generating code for the two
     * operands, and then the multiplication instruction.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        if (type() == Type.INT) {
	    	lhs.codegen(output);
	        rhs.codegen(output);
	        output.addNoArgInstruction(IMUL);
        } else if (type() == Type.LONG) {
	    	lhs.codegen(output);
	        rhs.codegen(output);
	        output.addNoArgInstruction(LMUL);
        }
    }

}

The test and results are as follows:

		int h = 3;
		long e = 5L;
		int i = 6;
		long f = 4L;
		long hep = e * f;
		System.out.println(hep);
		long j = e - f;
		System.out.println(j);
		long g = e + f;
		System.out.println(g);

BUILD SUCCESSFUL
Total time: 5 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  tests\pass\Long.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Long
20
1
9

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Long
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Long.class
  Last modified Nov 13, 2016; size 372 bytes
  MD5 checksum bc5c5f5a37d872a22fb56ec6bd211b60
public class pass.Long
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long
   #2 = Class              #1             // pass/Long
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Long               5l
  #14 = Long               4l
  #16 = Utf8               java/lang/System
  #17 = Class              #16            // java/lang/System
  #18 = Utf8               out
  #19 = Utf8               Ljava/io/PrintStream;
  #20 = NameAndType        #18:#19        // out:Ljava/io/PrintStream;
  #21 = Fieldref           #17.#20        // java/lang/System.out:Ljava/io/PrintStream;
  #22 = Utf8               java/io/PrintStream
  #23 = Class              #22            // java/io/PrintStream
  #24 = Utf8               println
  #25 = Utf8               (J)V
  #26 = NameAndType        #24:#25        // println:(J)V
  #27 = Methodref          #23.#26        // java/io/PrintStream.println:(J)V
{
  public pass.Long();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=13, args_size=1
         0: iconst_3
         1: istore_1
         2: ldc2_w        #12                 // long 5l
         5: lstore_2
         6: bipush        6
         8: istore        4
        10: ldc2_w        #14                 // long 4l
        13: lstore        5
        15: lload_2
        16: lload         5
        18: lmul
        19: lstore        7
        21: getstatic     #21                 // Field java/lang/System.out:Ljava/io/PrintStream;
        24: lload         7
        26: invokevirtual #27                 // Method java/io/PrintStream.println:(J)V
        29: lload_2
        30: lload         5
        32: lsub
        33: lstore        9
        35: getstatic     #21                 // Field java/lang/System.out:Ljava/io/PrintStream;
        38: lload         9
        40: invokevirtual #27                 // Method java/io/PrintStream.println:(J)V
        43: lload_2
        44: lload         5
        46: ladd
        47: lstore        11
        49: getstatic     #21                 // Field java/lang/System.out:Ljava/io/PrintStream;
        52: lload         11
        54: invokevirtual #27                 // Method java/io/PrintStream.println:(J)V
        57: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

Next JPlusAssign, analyze and codegen have to be modified:

   public JExpression analyze(Context context) {
        if (!(lhs instanceof JLhs)) {
            JAST.compilationUnit.reportSemanticError(line(),
                    "Illegal lhs for assignment");
	    return this;
        } else {
            lhs = (JExpression) ((JLhs) lhs).analyzeLhs(context);
        }
        rhs = (JExpression) rhs.analyze(context);
        if (lhs.type().equals(Type.INT)) {
            rhs.type().mustMatchExpected(line(), Type.INT);
            type = Type.INT;
        } else if (lhs.type().equals(Type.LONG)) {//added
            rhs.type().mustMatchExpected(line(), Type.LONG);
            type = Type.LONG;
        } else if (lhs.type().equals(Type.STRING)) {
            rhs = (new JStringConcatenationOp(line, lhs, rhs)).analyze(context);
            type = Type.STRING;
        } else {
            JAST.compilationUnit.reportSemanticError(line(),
                    "Invalid lhs type for +=: " + lhs.type());
        }
        return this;
    }

    /**
     * Code generation for += involves, generating code for loading any
     * necessary l-value onto the stack, for (unless a string concatenation)
     * loading the r-value, for (unless a statement) copying the r-value to its
     * proper place on the stack, and for doing the store.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        ((JLhs) lhs).codegenLoadLhsLvalue(output);
        if (lhs.type().equals(Type.STRING)) {
            rhs.codegen(output);
        } else if (lhs.type().equals(Type.INT)){
            ((JLhs) lhs).codegenLoadLhsRvalue(output);
            rhs.codegen(output);
            output.addNoArgInstruction(IADD);
        } else {
        	((JLhs) lhs).codegenLoadLhsRvalue(output);
            rhs.codegen(output);
            output.addNoArgInstruction(LADD);
        }
        if (!isStatementExpression) {
            // Generate code to leave the r-value atop stack
            ((JLhs) lhs).codegenDuplicateRvalue(output);
        }
        ((JLhs) lhs).codegenStore(output);
    }

Modifications can also be made to JReturn and Jmethoddeclaration

public void codegen(CLEmitter output) {
        if (expr == null) {
            output.addNoArgInstruction(RETURN);
        } else {
            expr.codegen(output);
            if (expr.type() == Type.INT
                || expr.type() == Type.BOOLEAN
                || expr.type() == Type.CHAR) {
                output.addNoArgInstruction(IRETURN);
            } else if (expr.type() == Type.LONG ) { //Added
                    output.addNoArgInstruction(LRETURN);
                }else {
                output.addNoArgInstruction(ARETURN);
            }
        }

public void partialCodegen(Context context, CLEmitter partial) {
        // Generate a method with an empty body; need a return to
        // make
        // the class verifier happy.
        partial.addMethod(mods, name, descriptor, null, false);

        // Add implicit RETURN
        if (returnType == Type.VOID) {
            partial.addNoArgInstruction(RETURN);
        } else if (returnType == Type.INT
            || returnType == Type.BOOLEAN || returnType == Type.CHAR) {
            partial.addNoArgInstruction(ICONST_0);
            partial.addNoArgInstruction(IRETURN);
        } else if (returnType == Type.LONG) {
                partial.addNoArgInstruction(ICONST_0);
                partial.addNoArgInstruction(LRETURN);
            }else {
            // A reference type.
            partial.addNoArgInstruction(ACONST_NULL);
            partial.addNoArgInstruction(ARETURN);
        }
    }

tests and results are as follows:

package pass;

import java.lang.System;

public class Long {
	public static void main(String[] args){
		int a = 32768;
		long b = 2L;
		System.out.println(a);
		System.out.println(b);
		System.out.println(1L);
		System.out.println(127l);//last letter is L
		System.out.println(32767L);
		System.out.println(2147483647l);//last letter is L
		System.out.println(9223372036854775807L);
		
		System.out.println(2L + 3L);
		System.out.println(3L - 2L);
		
		long ab = 0L;
		int ai = 32769;
		ai = (int) ab;
		char d = (char) ai;
		ai = (int) d;
		ab = 3L - 2L;
		long c = (long) ai;
		System.out.println(c);
		ai = (int) c;
		System.out.println(c);
		System.out.println(ab);
		long[] e = {63L};//must use this format
        //e[0] = 63L;
        System.out.println(e[0]);
        long[] e2 = new long[3];
        e2[0] = 63l;//lower case l
        System.out.println(e2[0]);
        int[] ei = new int[3];//must use this format
        ei[0] = 63;
        System.out.println(ei[0]);
		int h = 3;
		long ef = 5L;
		int i = 6;
		long f = 4L;
		long hep = ef * f;
		System.out.println(hep);
		long j = ef - f;
		System.out.println(j);
		long g = ef + f;
		System.out.println(g);
		
		long k = 1L;
		k += 1L;
		System.out.println(k);
		
		int ei = 5;
		int fi = 4;
		int gi = ei + fi;
		System.out.println(gi);
//        System.out.println(get());
		
	}
//	static long tester = 3L;
//	 
//	 public static long get() {
//	     return tester;
//	 }
}


BUILD SUCCESSFUL
Total time: 5 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  tests\pass\Long.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Long
32768
2
1
127
32767
2147483647
9223372036854775807
5
1
0
0
1
63
63
63
20
1
9
2
9

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Long
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Long.class
  Last modified Nov 13, 2016; size 723 bytes
  MD5 checksum 2b311adbeefdc09ffe7a29a684fbb7fa
public class pass.Long
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long
   #2 = Class              #1             // pass/Long
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Integer            32768
  #13 = Long               2l
  #15 = Utf8               java/lang/System
  #16 = Class              #15            // java/lang/System
  #17 = Utf8               out
  #18 = Utf8               Ljava/io/PrintStream;
  #19 = NameAndType        #17:#18        // out:Ljava/io/PrintStream;
  #20 = Fieldref           #16.#19        // java/lang/System.out:Ljava/io/PrintStream;
  #21 = Utf8               java/io/PrintStream
  #22 = Class              #21            // java/io/PrintStream
  #23 = Utf8               println
  #24 = Utf8               (I)V
  #25 = NameAndType        #23:#24        // println:(I)V
  #26 = Methodref          #22.#25        // java/io/PrintStream.println:(I)V
  #27 = Utf8               (J)V
  #28 = NameAndType        #23:#27        // println:(J)V
  #29 = Methodref          #22.#28        // java/io/PrintStream.println:(J)V
  #30 = Long               127l
  #32 = Long               32767l
  #34 = Long               2147483647l
  #36 = Long               9223372036854775807l
  #38 = Long               3l
  #40 = Integer            32769
  #41 = Long               63l
  #43 = Long               5l
  #45 = Long               4l
{
  public pass.Long();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=30, args_size=1
         0: ldc           #12                 // int 32768
         2: istore_1
         3: ldc2_w        #13                 // long 2l
         6: lstore_2
         7: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        10: iload_1
        11: invokevirtual #26                 // Method java/io/PrintStream.println:(I)V
        14: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        17: lload_2
        18: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        21: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        24: lconst_1
        25: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        28: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        31: ldc2_w        #30                 // long 127l
        34: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        37: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        40: ldc2_w        #32                 // long 32767l
        43: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        46: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        49: ldc2_w        #34                 // long 2147483647l
        52: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        55: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        58: ldc2_w        #36                 // long 9223372036854775807l
        61: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        64: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        67: ldc2_w        #13                 // long 2l
        70: ldc2_w        #38                 // long 3l
        73: ladd
        74: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        77: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        80: ldc2_w        #38                 // long 3l
        83: ldc2_w        #13                 // long 2l
        86: lsub
        87: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
        90: lconst_0
        91: lstore        4
        93: ldc           #40                 // int 32769
        95: istore        6
        97: lload         4
        99: l2i
       100: istore        6
       102: iload         6
       104: i2c
       105: istore        7
       107: iload         7
       109: istore        6
       111: ldc2_w        #38                 // long 3l
       114: ldc2_w        #13                 // long 2l
       117: lsub
       118: lstore        4
       120: iload         6
       122: i2l
       123: lstore        8
       125: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       128: lload         8
       130: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       133: lload         8
       135: l2i
       136: istore        6
       138: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       141: lload         8
       143: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       146: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       149: lload         4
       151: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       154: iconst_1
       155: newarray       long
       157: dup
       158: iconst_0
       159: ldc2_w        #41                 // long 63l
       162: lastore
       163: astore        10
       165: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       168: aload         10
       170: iconst_0
       171: laload
       172: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       175: iconst_3
       176: newarray       long
       178: astore        11
       180: aload         11
       182: iconst_0
       183: ldc2_w        #41                 // long 63l
       186: lastore
       187: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       190: aload         11
       192: iconst_0
       193: laload
       194: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       197: iconst_3
       198: newarray       int
       200: astore        12
       202: aload         12
       204: iconst_0
       205: bipush        63
       207: iastore
       208: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       211: aload         12
       213: iconst_0
       214: iaload
       215: invokevirtual #26                 // Method java/io/PrintStream.println:(I)V
       218: iconst_3
       219: istore        13
       221: ldc2_w        #43                 // long 5l
       224: lstore        14
       226: bipush        6
       228: istore        16
       230: ldc2_w        #45                 // long 4l
       233: lstore        17
       235: lload         14
       237: lload         17
       239: lmul
       240: lstore        19
       242: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       245: lload         19
       247: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       250: lload         14
       252: lload         17
       254: lsub
       255: lstore        21
       257: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       260: lload         21
       262: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       265: lload         14
       267: lload         17
       269: ladd
       270: lstore        23
       272: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       275: lload         23
       277: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       280: lconst_1
       281: lstore        25
       283: lload         25
       285: lconst_1
       286: ladd
       287: lstore        25
       289: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       292: lload         25
       294: invokevirtual #29                 // Method java/io/PrintStream.println:(J)V
       297: iconst_5
       298: istore        27
       300: iconst_4
       301: istore        28
       303: iload         27
       305: iload         28
       307: iadd
       308: istore        29
       310: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
       313: iload         29
       315: invokevirtual #26                 // Method java/io/PrintStream.println:(I)V
       318: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

With the help of Professor Campbell I located a bug in my code where I was
placed where an L should have been placed:

    public void partialCodegen(Context context, CLEmitter partial) {
        // Generate a method with an empty body; need a return to
        // make
        // the class verifier happy.
        partial.addMethod(mods, name, descriptor, null, false);

        // Add implicit RETURN
        if (returnType == Type.VOID) {
            partial.addNoArgInstruction(RETURN);
        } else if (returnType == Type.INT
            || returnType == Type.BOOLEAN || returnType == Type.CHAR) {
            partial.addNoArgInstruction(ICONST_0);
            partial.addNoArgInstruction(IRETURN);
        } else if (returnType == Type.LONG) {
                partial.addNoArgInstruction(LCONST_0); <<<<<<<<<<<<<<<<<<<****
                partial.addNoArgInstruction(LRETURN);
            }else {
            // A reference type.
            partial.addNoArgInstruction(ACONST_NULL);
            partial.addNoArgInstruction(ARETURN);
        }
    }

The updated tests and results are as follows:

package pass;

import java.lang.System;

public class Long {
	public static void main(String[] args){
		int a = 32768;
		long b = 2L;
		System.out.println(a);
		System.out.println(b);
		System.out.println(1L);
		System.out.println(127l);//last letter is L
		System.out.println(32767L);
		System.out.println(2147483647l);//last letter is L
		System.out.println(9223372036854775807L);
		
		System.out.println(2L + 3L);
		System.out.println(3L - 2L);
		
		long ab = 0L;
		int ai = 32769;
		ai = (int) ab;
		char d = (char) ai;
		ai = (int) d;
		ab = 3L - 2L;
		long c = (long) ai;
		System.out.println(c);
		ai = (int) c;
		System.out.println(c);
		System.out.println(ab);
		long[] e = {63L};//must use this format
        //e[0] = 63L;
        System.out.println(e[0]);
        long[] e2 = new long[3];
        e2[0] = 63l;//lower case l
        System.out.println(e2[0]);
        int[] ei = new int[3];//must use this format
        ei[0] = 63;
        System.out.println(ei[0]);
		int h = 3;
		long ef = 5L;
		int i = 6;
		long f = 4L;
		long hep = ef * f;
		System.out.println(hep);
		long j = ef - f;
		System.out.println(j);
		long g = ef + f;
		System.out.println(g);
		
		long k = 1L;
		k += 1L;
		System.out.println(k);
		
		int eij = 5;
		int fi = 4;
		int gi = eij + fi;
		System.out.println(gi);
        
		Long l = new Long();
		System.out.println(l.get2());
		System.out.println(l.get());
		
		Long2 l2 = new Long2();
		System.out.println(l2.getLong());
	}
	long tester = 3L;
	int tester2 = 3;
	 public int get2() {
		 return tester2;
	 }
	 
	 public long get() {
	     return tester;
	 }
}

class Long2 {
	long test3 = 5L;
	
	public long getLong(){
		return this.test3;
	}
}

BUILD SUCCESSFUL
Total time: 1 second

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Long.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Long
32768
2
1
127
32767
2147483647
9223372036854775807
5
1
0
0
1
63
63
63
20
1
9
2
9
3
3
5

C:\Users\bwils_000\Desktop\eclipse projects\j-->

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Long
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Long.class
  Last modified Nov 22, 2016; size 1002 bytes
  MD5 checksum 4201bc6e1b16d505065e0529dff850a3
public class pass.Long
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long
   #2 = Class              #1             // pass/Long
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Long               3l
  #11 = Utf8               tester
  #12 = Utf8               J
  #13 = NameAndType        #11:#12        // tester:J
  #14 = Fieldref           #2.#13         // pass/Long.tester:J
  #15 = Utf8               tester2
  #16 = Utf8               I
  #17 = NameAndType        #15:#16        // tester2:I
  #18 = Fieldref           #2.#17         // pass/Long.tester2:I
  #19 = Utf8               Code
  #20 = Utf8               main
  #21 = Utf8               ([Ljava/lang/String;)V
  #22 = Integer            32768
  #23 = Long               2l
  #25 = Utf8               java/lang/System
  #26 = Class              #25            // java/lang/System
  #27 = Utf8               out
  #28 = Utf8               Ljava/io/PrintStream;
  #29 = NameAndType        #27:#28        // out:Ljava/io/PrintStream;
  #30 = Fieldref           #26.#29        // java/lang/System.out:Ljava/io/PrintStream;
  #31 = Utf8               java/io/PrintStream
  #32 = Class              #31            // java/io/PrintStream
  #33 = Utf8               println
  #34 = Utf8               (I)V
  #35 = NameAndType        #33:#34        // println:(I)V
  #36 = Methodref          #32.#35        // java/io/PrintStream.println:(I)V
  #37 = Utf8               (J)V
  #38 = NameAndType        #33:#37        // println:(J)V
  #39 = Methodref          #32.#38        // java/io/PrintStream.println:(J)V
  #40 = Long               127l
  #42 = Long               32767l
  #44 = Long               2147483647l
  #46 = Long               9223372036854775807l
  #48 = Integer            32769
  #49 = Long               63l
  #51 = Long               5l
  #53 = Long               4l
  #55 = Methodref          #2.#7          // pass/Long."<init>":()V
  #56 = Utf8               get2
  #57 = Utf8               ()I
  #58 = NameAndType        #56:#57        // get2:()I
  #59 = Methodref          #2.#58         // pass/Long.get2:()I
  #60 = Utf8               get
  #61 = Utf8               ()J
  #62 = NameAndType        #60:#61        // get:()J
  #63 = Methodref          #2.#62         // pass/Long.get:()J
  #64 = Utf8               pass/Long2
  #65 = Class              #64            // pass/Long2
  #66 = Methodref          #65.#7         // pass/Long2."<init>":()V
  #67 = Utf8               getLong
  #68 = NameAndType        #67:#61        // getLong:()J
  #69 = Methodref          #65.#68        // pass/Long2.getLong:()J
{
  long tester;
    descriptor: J
    flags:

  int tester2;
    descriptor: I
    flags:

  public pass.Long();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=6, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: ldc2_w        #9                  // long 3l
         8: putfield      #14                 // Field tester:J
        11: aload_0
        12: iconst_3
        13: putfield      #18                 // Field tester2:I
        16: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=32, args_size=1
         0: ldc           #22                 // int 32768
         2: istore_1
         3: ldc2_w        #23                 // long 2l
         6: lstore_2
         7: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        10: iload_1
        11: invokevirtual #36                 // Method java/io/PrintStream.println:(I)V
        14: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        17: lload_2
        18: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
        21: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        24: lconst_1
        25: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
        28: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        31: ldc2_w        #40                 // long 127l
        34: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
        37: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        40: ldc2_w        #42                 // long 32767l
        43: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
        46: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        49: ldc2_w        #44                 // long 2147483647l
        52: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
        55: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        58: ldc2_w        #46                 // long 9223372036854775807l
        61: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
        64: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        67: ldc2_w        #23                 // long 2l
        70: ldc2_w        #9                  // long 3l
        73: ladd
        74: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
        77: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
        80: ldc2_w        #9                  // long 3l
        83: ldc2_w        #23                 // long 2l
        86: lsub
        87: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
        90: lconst_0
        91: lstore        4
        93: ldc           #48                 // int 32769
        95: istore        6
        97: lload         4
        99: l2i
       100: istore        6
       102: iload         6
       104: i2c
       105: istore        7
       107: iload         7
       109: istore        6
       111: ldc2_w        #9                  // long 3l
       114: ldc2_w        #23                 // long 2l
       117: lsub
       118: lstore        4
       120: iload         6
       122: i2l
       123: lstore        8
       125: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       128: lload         8
       130: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       133: lload         8
       135: l2i
       136: istore        6
       138: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       141: lload         8
       143: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       146: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       149: lload         4
       151: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       154: iconst_1
       155: newarray       long
       157: dup
       158: iconst_0
       159: ldc2_w        #49                 // long 63l
       162: lastore
       163: astore        10
       165: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       168: aload         10
       170: iconst_0
       171: laload
       172: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       175: iconst_3
       176: newarray       long
       178: astore        11
       180: aload         11
       182: iconst_0
       183: ldc2_w        #49                 // long 63l
       186: lastore
       187: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       190: aload         11
       192: iconst_0
       193: laload
       194: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       197: iconst_3
       198: newarray       int
       200: astore        12
       202: aload         12
       204: iconst_0
       205: bipush        63
       207: iastore
       208: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       211: aload         12
       213: iconst_0
       214: iaload
       215: invokevirtual #36                 // Method java/io/PrintStream.println:(I)V
       218: iconst_3
       219: istore        13
       221: ldc2_w        #51                 // long 5l
       224: lstore        14
       226: bipush        6
       228: istore        16
       230: ldc2_w        #53                 // long 4l
       233: lstore        17
       235: lload         14
       237: lload         17
       239: lmul
       240: lstore        19
       242: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       245: lload         19
       247: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       250: lload         14
       252: lload         17
       254: lsub
       255: lstore        21
       257: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       260: lload         21
       262: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       265: lload         14
       267: lload         17
       269: ladd
       270: lstore        23
       272: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       275: lload         23
       277: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       280: lconst_1
       281: lstore        25
       283: lload         25
       285: lconst_1
       286: ladd
       287: lstore        25
       289: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       292: lload         25
       294: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       297: iconst_5
       298: istore        27
       300: iconst_4
       301: istore        28
       303: iload         27
       305: iload         28
       307: iadd
       308: istore        29
       310: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       313: iload         29
       315: invokevirtual #36                 // Method java/io/PrintStream.println:(I)V
       318: new           #2                  // class pass/Long
       321: dup
       322: invokespecial #55                 // Method "<init>":()V
       325: astore        30
       327: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       330: aload         30
       332: invokevirtual #59                 // Method get2:()I
       335: invokevirtual #36                 // Method java/io/PrintStream.println:(I)V
       338: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       341: aload         30
       343: invokevirtual #63                 // Method get:()J
       346: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       349: new           #65                 // class pass/Long2
       352: dup
       353: invokespecial #66                 // Method pass/Long2."<init>":()V
       356: astore        31
       358: getstatic     #30                 // Field java/lang/System.out:Ljava/io/PrintStream;
       361: aload         31
       363: invokevirtual #69                 // Method pass/Long2.getLong:()J
       366: invokevirtual #39                 // Method java/io/PrintStream.println:(J)V
       369: return

  public int get2();
    descriptor: ()I
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #18                 // Field tester2:I
         4: ireturn

  public long get();
    descriptor: ()J
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #14                 // Field tester:J
         4: lreturn
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Long.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>pass.Long</Entry>
      <Entry>Long2</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>Long</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>pass.Long2</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Long" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="ab" offset="4"/>
                <Entry name="ef" offset="14"/>
                <Entry name="b" offset="2"/>
                <Entry name="gi" offset="29"/>
                <Entry name="c" offset="8"/>
                <Entry name="fi" offset="28"/>
                <Entry name="d" offset="7"/>
                <Entry name="ei" offset="12"/>
                <Entry name="e" offset="10"/>
                <Entry name="f" offset="17"/>
                <Entry name="l2" offset="31"/>
                <Entry name="g" offset="23"/>
                <Entry name="eij" offset="27"/>
                <Entry name="ai" offset="6"/>
                <Entry name="h" offset="13"/>
                <Entry name="i" offset="16"/>
                <Entry name="j" offset="21"/>
                <Entry name="k" offset="25"/>
                <Entry name="l" offset="30"/>
                <Entry name="e2" offset="11"/>
                <Entry name="hep" offset="19"/>
              </Entries>
            </LocalContext>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="7" name="a" type="int">
                  <Initializer>
                    <JLiteralInt line="7" type="int" value="32768"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="8" name="b" type="long">
                  <Initializer>
                    <JLiteralLong line="8" type="long" value="2L"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="9">
              <JMessageExpression line="9" name="println">
                <Target>
                  <JFieldSelection line="9" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="10">
              <JMessageExpression line="10" name="println">
                <Target>
                  <JFieldSelection line="10" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="b"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="11">
              <JMessageExpression line="11" name="println">
                <Target>
                  <JFieldSelection line="11" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralLong line="11" type="long" value="1L"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="12">
              <JMessageExpression line="12" name="println">
                <Target>
                  <JFieldSelection line="12" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralLong line="12" type="long" value="127l"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="13">
              <JMessageExpression line="13" name="println">
                <Target>
                  <JFieldSelection line="13" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralLong line="13" type="long" value="32767L"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="14">
              <JMessageExpression line="14" name="println">
                <Target>
                  <JFieldSelection line="14" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralLong line="14" type="long" value="2147483647l"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="15">
              <JMessageExpression line="15" name="println">
                <Target>
                  <JFieldSelection line="15" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralLong line="15" type="long" value="9223372036854775807L"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="17">
              <JMessageExpression line="17" name="println">
                <Target>
                  <JFieldSelection line="17" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JBinaryExpression line="17" type="long" operator="+">
                      <Lhs>
                        <JLiteralLong line="17" type="long" value="2L"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralLong line="17" type="long" value="3L"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="18">
              <JMessageExpression line="18" name="println">
                <Target>
                  <JFieldSelection line="18" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JBinaryExpression line="18" type="long" operator="-">
                      <Lhs>
                        <JLiteralLong line="18" type="long" value="3L"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralLong line="18" type="long" value="2L"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="20" name="ab" type="long">
                  <Initializer>
                    <JLiteralLong line="20" type="long" value="0L"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="21" name="ai" type="int">
                  <Initializer>
                    <JLiteralInt line="21" type="int" value="32769"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="22">
              <JBinaryExpression line="22" type="int" operator="=">
                <Lhs>
                  <JVariable name="ai"/>
                </Lhs>
                <Rhs>
                  <JCastOp line="22" type="int"/>
                    <Expression>
                      <JVariable name="ab"/>
                    </Expression>
                  </JCastOp>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="23" name="d" type="char">
                  <Initializer>
                    <JCastOp line="23" type="char"/>
                      <Expression>
                        <JVariable name="ai"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="24">
              <JBinaryExpression line="24" type="int" operator="=">
                <Lhs>
                  <JVariable name="ai"/>
                </Lhs>
                <Rhs>
                  <JCastOp line="24" type="int"/>
                    <Expression>
                      <JVariable name="d"/>
                    </Expression>
                  </JCastOp>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="25">
              <JBinaryExpression line="25" type="long" operator="=">
                <Lhs>
                  <JVariable name="ab"/>
                </Lhs>
                <Rhs>
                  <JBinaryExpression line="25" type="long" operator="-">
                    <Lhs>
                      <JLiteralLong line="25" type="long" value="3L"/>
                    </Lhs>
                    <Rhs>
                      <JLiteralLong line="25" type="long" value="2L"/>
                    </Rhs>
                  </JBinaryExpression>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="26" name="c" type="long">
                  <Initializer>
                    <JCastOp line="26" type="long"/>
                      <Expression>
                        <JVariable name="ai"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="27">
              <JMessageExpression line="27" name="println">
                <Target>
                  <JFieldSelection line="27" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="c"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="28">
              <JBinaryExpression line="28" type="int" operator="=">
                <Lhs>
                  <JVariable name="ai"/>
                </Lhs>
                <Rhs>
                  <JCastOp line="28" type="int"/>
                    <Expression>
                      <JVariable name="c"/>
                    </Expression>
                  </JCastOp>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="29">
              <JMessageExpression line="29" name="println">
                <Target>
                  <JFieldSelection line="29" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="c"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="30">
              <JMessageExpression line="30" name="println">
                <Target>
                  <JFieldSelection line="30" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="ab"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="31" name="e" type="long[]">
                  <Initializer>
                    <JArrayInitializer>
                      <JLiteralLong line="31" type="long" value="63L"/>
                    </JArrayInitializer>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="33">
              <JMessageExpression line="33" name="println">
                <Target>
                  <JFieldSelection line="33" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JArrayExpression>
                      <TheArray>
                        <JVariable name="e"/>
                      </TheArray>
                      <IndexExpression>
                        <JLiteralInt line="33" type="int" value="0"/>
                      </IndexExpression>
                    </JArrayExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="34" name="e2" type="long[]">
                  <Initializer>
                    <JNewArrayOp line="34" type="long[]"/>
                      <Dimensions>
                        <Dimension>
                          <JLiteralInt line="34" type="int" value="3"/>
                        </Dimension>
                      </Dimensions>
                    </JNewArrayOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="35">
              <JBinaryExpression line="35" type="long" operator="=">
                <Lhs>
                  <JArrayExpression>
                    <TheArray>
                      <JVariable name="e2"/>
                    </TheArray>
                    <IndexExpression>
                      <JLiteralInt line="35" type="int" value="0"/>
                    </IndexExpression>
                  </JArrayExpression>
                </Lhs>
                <Rhs>
                  <JLiteralLong line="35" type="long" value="63l"/>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="36">
              <JMessageExpression line="36" name="println">
                <Target>
                  <JFieldSelection line="36" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JArrayExpression>
                      <TheArray>
                        <JVariable name="e2"/>
                      </TheArray>
                      <IndexExpression>
                        <JLiteralInt line="36" type="int" value="0"/>
                      </IndexExpression>
                    </JArrayExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="37" name="ei" type="int[]">
                  <Initializer>
                    <JNewArrayOp line="37" type="int[]"/>
                      <Dimensions>
                        <Dimension>
                          <JLiteralInt line="37" type="int" value="3"/>
                        </Dimension>
                      </Dimensions>
                    </JNewArrayOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="38">
              <JBinaryExpression line="38" type="int" operator="=">
                <Lhs>
                  <JArrayExpression>
                    <TheArray>
                      <JVariable name="ei"/>
                    </TheArray>
                    <IndexExpression>
                      <JLiteralInt line="38" type="int" value="0"/>
                    </IndexExpression>
                  </JArrayExpression>
                </Lhs>
                <Rhs>
                  <JLiteralInt line="38" type="int" value="63"/>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="39">
              <JMessageExpression line="39" name="println">
                <Target>
                  <JFieldSelection line="39" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JArrayExpression>
                      <TheArray>
                        <JVariable name="ei"/>
                      </TheArray>
                      <IndexExpression>
                        <JLiteralInt line="39" type="int" value="0"/>
                      </IndexExpression>
                    </JArrayExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="40" name="h" type="int">
                  <Initializer>
                    <JLiteralInt line="40" type="int" value="3"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="41" name="ef" type="long">
                  <Initializer>
                    <JLiteralLong line="41" type="long" value="5L"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="42" name="i" type="int">
                  <Initializer>
                    <JLiteralInt line="42" type="int" value="6"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="43" name="f" type="long">
                  <Initializer>
                    <JLiteralLong line="43" type="long" value="4L"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="44" name="hep" type="long">
                  <Initializer>
                    <JBinaryExpression line="44" type="long" operator="*">
                      <Lhs>
                        <JVariable name="ef"/>
                      </Lhs>
                      <Rhs>
                        <JVariable name="f"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="45">
              <JMessageExpression line="45" name="println">
                <Target>
                  <JFieldSelection line="45" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="hep"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="46" name="j" type="long">
                  <Initializer>
                    <JBinaryExpression line="46" type="long" operator="-">
                      <Lhs>
                        <JVariable name="ef"/>
                      </Lhs>
                      <Rhs>
                        <JVariable name="f"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="47">
              <JMessageExpression line="47" name="println">
                <Target>
                  <JFieldSelection line="47" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="j"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="48" name="g" type="long">
                  <Initializer>
                    <JBinaryExpression line="48" type="long" operator="+">
                      <Lhs>
                        <JVariable name="ef"/>
                      </Lhs>
                      <Rhs>
                        <JVariable name="f"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="49">
              <JMessageExpression line="49" name="println">
                <Target>
                  <JFieldSelection line="49" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="g"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="51" name="k" type="long">
                  <Initializer>
                    <JLiteralLong line="51" type="long" value="1L"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="52">
              <JBinaryExpression line="52" type="long" operator="+=">
                <Lhs>
                  <JVariable name="k"/>
                </Lhs>
                <Rhs>
                  <JLiteralLong line="52" type="long" value="1L"/>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="53">
              <JMessageExpression line="53" name="println">
                <Target>
                  <JFieldSelection line="53" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="k"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="55" name="eij" type="int">
                  <Initializer>
                    <JLiteralInt line="55" type="int" value="5"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="56" name="fi" type="int">
                  <Initializer>
                    <JLiteralInt line="56" type="int" value="4"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="57" name="gi" type="int">
                  <Initializer>
                    <JBinaryExpression line="57" type="int" operator="+">
                      <Lhs>
                        <JVariable name="eij"/>
                      </Lhs>
                      <Rhs>
                        <JVariable name="fi"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="58">
              <JMessageExpression line="58" name="println">
                <Target>
                  <JFieldSelection line="58" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="gi"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="60" name="l" type="Long">
                  <Initializer>
                    <JNewOp line="60" type="pass.Long"/>
                      <Arguments>
                      </Arguments>
                    </JNewOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="61">
              <JMessageExpression line="61" name="println">
                <Target>
                  <JFieldSelection line="61" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JMessageExpression line="61" name="get2">
                      <Target>
                        <JVariable name="l"/>
                      </Target>
                      <Arguments>
                      </Arguments>
                    </JMessageExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="62">
              <JMessageExpression line="62" name="println">
                <Target>
                  <JFieldSelection line="62" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JMessageExpression line="62" name="get">
                      <Target>
                        <JVariable name="l"/>
                      </Target>
                      <Arguments>
                      </Arguments>
                    </JMessageExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="64" name="l2" type="Long2">
                  <Initializer>
                    <JNewOp line="64" type="pass.Long2"/>
                      <Arguments>
                      </Arguments>
                    </JNewOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="65">
              <JMessageExpression line="65" name="println">
                <Target>
                  <JFieldSelection line="65" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JMessageExpression line="65" name="getLong">
                      <Target>
                        <JVariable name="l2"/>
                      </Target>
                      <Arguments>
                      </Arguments>
                    </JMessageExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      <JFieldDeclaration line="67"/>
        <Modifiers>
        </Modifiers>
        <VariableDeclarators>
          <JVariableDeclarator line="67" name="tester" type="long">
            <Initializer>
              <JLiteralLong line="67" type="long" value="3L"/>
            </Initializer>
          </JVariableDeclarator>
        <VariableDeclarators>
      </JFieldDeclaration>
      <JFieldDeclaration line="68"/>
        <Modifiers>
        </Modifiers>
        <VariableDeclarators>
          <JVariableDeclarator line="68" name="tester2" type="int">
            <Initializer>
              <JLiteralInt line="68" type="int" value="3"/>
            </Initializer>
          </JVariableDeclarator>
        <VariableDeclarators>
      </JFieldDeclaration>
      <JMethodDeclaration line="69" name="get2" returnType="int">
        <MethodContext>
          <LocalContext>
            <Entries>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
        </Modifiers>
        <FormalParameters>
        </FormalParameters>
        <Body>
          <JBlock line="69">
            <LocalContext>
              <Entries>
              </Entries>
            </LocalContext>
            <JReturnStatement line="70">
              <JFieldSelection line="70" name="tester2"/>
                <Target>
                  <JThis/>
                </Target>
              </JFieldSelection>
            </JReturnStatement>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      <JMethodDeclaration line="73" name="get" returnType="long">
        <MethodContext>
          <LocalContext>
            <Entries>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
        </Modifiers>
        <FormalParameters>
        </FormalParameters>
        <Body>
          <JBlock line="73">
            <LocalContext>
              <Entries>
              </Entries>
            </LocalContext>
            <JReturnStatement line="74">
              <JFieldSelection line="74" name="tester"/>
                <Target>
                  <JThis/>
                </Target>
              </JFieldSelection>
            </JReturnStatement>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
    <JClassDeclaration line="78" name="Long2" super="java.lang.Object">
      <Modifiers>
      </Modifiers>
      <ClassBlock>
      <JFieldDeclaration line="79"/>
        <Modifiers>
        </Modifiers>
        <VariableDeclarators>
          <JVariableDeclarator line="79" name="test3" type="long">
            <Initializer>
              <JLiteralLong line="79" type="long" value="5L"/>
            </Initializer>
          </JVariableDeclarator>
        <VariableDeclarators>
      </JFieldDeclaration>
      <JMethodDeclaration line="81" name="getLong" returnType="long">
        <MethodContext>
          <LocalContext>
            <Entries>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
        </Modifiers>
        <FormalParameters>
        </FormalParameters>
        <Body>
          <JBlock line="81">
            <LocalContext>
              <Entries>
              </Entries>
            </LocalContext>
            <JReturnStatement line="82">
              <JFieldSelection line="82" name="test3"/>
                <Target>
                  <JThis/>
                </Target>
              </JFieldSelection>
            </JReturnStatement>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>


Question 2)

In order to solve for Conditional Expression, you use the methods used in
JIfStatement, except the then part and else part have to be converted to
JExpressions.

The simplest way to deal with the rest of the problem is to convert everything
back so that it operates exactly as JIfStatement would operate:

   public JExpression analyze(Context context) {
    	System.out.println("Inside JConiditonalExpression/analyze");
        condition = (JExpression) condition.analyze(context);
        condition.type().mustMatchExpected(line(), Type.BOOLEAN);
        thenPart2 = (JStatement) thenPart.analyze(context);
        if (elsePart != null) {
            elsePart2 = (JStatement) elsePart.analyze(context);
        }
        return this;
    }

    /**
     * Code generation for an if-statement. We generate code to branch over the
     * consequent if !test; the consequent is followed by an unconditonal branch
     * over (any) alternate.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        String elseLabel = output.createLabel();
        String endLabel = output.createLabel();
        condition.codegen(output, elseLabel, false);
        thenPart2.codegen(output);
        if (elsePart2 != null) {
            output.addBranchInstruction(GOTO, endLabel);
        }
        output.addLabel(elseLabel);
        if (elsePart2 != null) {
            elsePart2.codegen(output);
            output.addLabel(endLabel);
        }
    }

The test and results are as follows:

package pass;

import java.lang.System;

public class ConditionalExpression {
	public static void main(String[] args){
		int a = true ? 1 : 2;
		int b = (1 > 2) ? 3 : 4;
		System.out.println(a);
		System.out.println(b);
		
	}
}

BUILD SUCCESSFUL
Total time: 1 second

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  tests\pass\ConditionalExpression.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.ConditionalExpression
1
4

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.ConditionalExpression
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/ConditionalExpression.class
  Last modified Nov 13, 2016; size 345 bytes
  MD5 checksum af92492dc6d27979d49d8a5de4e4b3ce
public class pass.ConditionalExpression
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/ConditionalExpression
   #2 = Class              #1             // pass/ConditionalExpression
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               java/io/PrintStream
  #19 = Class              #18            // java/io/PrintStream
  #20 = Utf8               println
  #21 = Utf8               (I)V
  #22 = NameAndType        #20:#21        // println:(I)V
  #23 = Methodref          #19.#22        // java/io/PrintStream.println:(I)V
{
  public pass.ConditionalExpression();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=3, args_size=1
         0: iconst_1
         1: goto          5
         4: iconst_2
         5: istore_1
         6: iconst_1
         7: iconst_2
         8: if_icmple     15
        11: iconst_3
        12: goto          16
        15: iconst_4
        16: istore_2
        17: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        20: iload_1
        21: invokevirtual #23                 // Method java/io/PrintStream.println:(I)V
        24: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        27: iload_2
        28: invokevirtual #23                 // Method java/io/PrintStream.println:(I)V
        31: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->


However, to be more specific to conditional expressions it makes sense to write
using JExprssion in place of JStatement where appropriate:

the changes, tests, and results are as follows:

    public JExpression analyze(Context context) {
    	//System.out.println("Inside JConiditonalExpression/analyze");
        condition = (JExpression) condition.analyze(context);
        condition.type().mustMatchExpected(line(), Type.BOOLEAN);
//        thenPart2 = (JStatement) thenPart.analyze(context);
        thenPart = (JExpression) thenPart.analyze(context);
        if (elsePart != null) {
//            elsePart2 = (JStatement) elsePart.analyze(context);
        	elsePart = (JExpression) elsePart.analyze(context);
        }
        return this;
    }

    /**
     * Code generation for an if-statement. We generate code to branch over the
     * consequent if !test; the consequent is followed by an unconditonal branch
     * over (any) alternate.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        String elseLabel = output.createLabel();
        String endLabel = output.createLabel();
        condition.codegen(output, elseLabel, false);
        thenPart.codegen(output);
        if (elsePart != null) {
            output.addBranchInstruction(GOTO, endLabel);
        }
        output.addLabel(elseLabel);
        if (elsePart != null) {
            elsePart.codegen(output);
            output.addLabel(endLabel);
        }
    }

BUILD SUCCESSFUL
Total time: 3 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  tests\fail\ConditionalExpression.java
Error: file tests\fail\ConditionalExpression.java not found.

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  tests\pass\ConditionalExpression.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.ConditionalExpression
1
4

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.ConditionalExpression
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/ConditionalExpression.class
  Last modified Nov 13, 2016; size 345 bytes
  MD5 checksum af92492dc6d27979d49d8a5de4e4b3ce
public class pass.ConditionalExpression
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/ConditionalExpression
   #2 = Class              #1             // pass/ConditionalExpression
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               java/io/PrintStream
  #19 = Class              #18            // java/io/PrintStream
  #20 = Utf8               println
  #21 = Utf8               (I)V
  #22 = NameAndType        #20:#21        // println:(I)V
  #23 = Methodref          #19.#22        // java/io/PrintStream.println:(I)V
{
  public pass.ConditionalExpression();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=3, args_size=1
         0: iconst_1
         1: goto          5
         4: iconst_2
         5: istore_1
         6: iconst_1
         7: iconst_2
         8: if_icmple     15
        11: iconst_3
        12: goto          16
        15: iconst_4
        16: istore_2
        17: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        20: iload_1
        21: invokevirtual #23                 // Method java/io/PrintStream.println:(I)V
        24: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        27: iload_2
        28: invokevirtual #23                 // Method java/io/PrintStream.println:(I)V
        31: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\ConditionalExpression.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\ConditionalExpression.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>java.lang.System</Entry>
      <Entry>ConditionalExpression</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>pass.ConditionalExpression</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="ConditionalExpression" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="b" offset="2"/>
              </Entries>
            </LocalContext>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="7" name="a" type="int">
                  <Initializer>
                    <JConditionalExpression line="7">
                      <TestExpression>
                        <JLiteralTrue line="7" type="boolean"/>
                      </TestExpression>
                      <ThenClause>
                        <JLiteralInt line="7" type="int" value="1"/>
                      </ThenClause>
                      <ElseClause>
                        <JLiteralInt line="7" type="int" value="2"/>
                      </ElseClause>
                    </JConditionalExpression>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="8" name="b" type="int">
                  <Initializer>
                    <JConditionalExpression line="8">
                      <TestExpression>
                        <JBinaryExpression line="8" type="boolean" operator="&gt;">
                          <Lhs>
                            <JLiteralInt line="8" type="int" value="1"/>
                          </Lhs>
                          <Rhs>
                            <JLiteralInt line="8" type="int" value="2"/>
                          </Rhs>
                        </JBinaryExpression>
                      </TestExpression>
                      <ThenClause>
                        <JLiteralInt line="8" type="int" value="3"/>
                      </ThenClause>
                      <ElseClause>
                        <JLiteralInt line="8" type="int" value="4"/>
                      </ElseClause>
                    </JConditionalExpression>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="9">
              <JMessageExpression line="9" name="println">
                <Target>
                  <JFieldSelection line="9" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="10">
              <JMessageExpression line="10" name="println">
                <Target>
                  <JFieldSelection line="10" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="b"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

Question 3)

Adding the logical or operator requires analysis that is the same as logical
and, and codegen is only slightly different in that a short circuit can occur
regardless of onTrue is true or false:

    public JExpression analyze(Context context) {
        lhs = (JExpression) lhs.analyze(context);
        rhs = (JExpression) rhs.analyze(context);
        lhs.type().mustMatchExpected(line(), Type.BOOLEAN);
        rhs.type().mustMatchExpected(line(), Type.BOOLEAN);
        type = Type.BOOLEAN;
        return this;
    }

    /**
     * The semantics of j-- require that we implement short-circuiting branching
     * in implementing the logical AND.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     * @param targetLabel
     *            target for generated branch instruction.
     * @param onTrue
     *            should we branch on true?
     */

    public void codegen(CLEmitter output, String targetLabel, boolean onTrue) {
        if (onTrue) {
        	String falseLabel = output.createLabel();
            lhs.codegen(output, targetLabel, true);
            rhs.codegen(output, falseLabel, false);
            output.addLabel(falseLabel);
        } else {
        	String falseLabel = output.createLabel();
            lhs.codegen(output, falseLabel, true);
            rhs.codegen(output, targetLabel, false);
            output.addLabel(falseLabel);
        }
    }

The tests and the results are as follows:

package pass;

import java.lang.System;

public class Or {
	public static void main (String[] args) {
		if (true || false) {
			System.out.println("You got it 1!");
		}
		if (false || true) {
			System.out.println("You got it 2!");
		}
		if (false || false) {
			System.out.println("You didn't get it!");
		} else {
			System.out.println("You got it 3!");
		}
		if (true || true){
			System.out.println("You got it 4!");
		}
		
		boolean a = true || false;
		System.out.println(a);
	}
}

BUILD SUCCESSFUL
Total time: 5 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Or.java
inside JAssignment/JAssignOp/codegen

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Or
You got it 1!
You got it 2!
You got it 3!
You got it 4!
true

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Or
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Or.class
  Last modified Nov 11, 2016; size 503 bytes
  MD5 checksum 4c961e993fa803bc770edc5f73412091
public class pass.Or
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Or
   #2 = Class              #1             // pass/Or
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               You got it 1!
  #19 = String             #18            // You got it 1!
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (Ljava/lang/String;)V
  #24 = NameAndType        #22:#23        // println:(Ljava/lang/String;)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #26 = Utf8               You got it 2!
  #27 = String             #26            // You got it 2!
  #28 = Utf8               You didn't get it!
  #29 = String             #28            // You didn't get it!
  #30 = Utf8               You got it 3!
  #31 = String             #30            // You got it 3!
  #32 = Utf8               You got it 4!
  #33 = String             #32            // You got it 4!
  #34 = Utf8               (Z)V
  #35 = NameAndType        #22:#34        // println:(Z)V
  #36 = Methodref          #21.#35        // java/io/PrintStream.println:(Z)V
{
  public pass.Or();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: goto          6
         3: goto          14
         6: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
         9: ldc           #19                 // String You got it 1!
        11: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        14: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        17: ldc           #27                 // String You got it 2!
        19: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        22: goto          36
        25: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        28: ldc           #29                 // String You didn't get it!
        30: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        33: goto          44
        36: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        39: ldc           #31                 // String You got it 3!
        41: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        44: goto          47
        47: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        50: ldc           #33                 // String You got it 4!
        52: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        55: goto          61
        58: goto          65
        61: iconst_1
        62: goto          66
        65: iconst_0
        66: istore_1
        67: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        70: iload_1
        71: invokevirtual #36                 // Method java/io/PrintStream.println:(Z)V
        74: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->


C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\Or.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Or.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>Or</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>pass.Or</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Or" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
              </Entries>
            </LocalContext>
            <JIfStatement line="7">
              <TestExpression>
                <JBinaryExpression line="7" type="boolean" operator="||">
                  <Lhs>
                    <JLiteralTrue line="7" type="boolean"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralFalse line="7" type="boolean"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <ThenClause>
                <JBlock line="7">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="8">
                    <JMessageExpression line="8" name="println">
                      <Target>
                        <JFieldSelection line="8" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="8" type="java.lang.String" value="&quot;You got it 1!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ThenClause>
            </JIfStatement>
            <JIfStatement line="10">
              <TestExpression>
                <JBinaryExpression line="10" type="boolean" operator="||">
                  <Lhs>
                    <JLiteralFalse line="10" type="boolean"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralTrue line="10" type="boolean"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <ThenClause>
                <JBlock line="10">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="11">
                    <JMessageExpression line="11" name="println">
                      <Target>
                        <JFieldSelection line="11" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="11" type="java.lang.String" value="&quot;You got it 2!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ThenClause>
            </JIfStatement>
            <JIfStatement line="13">
              <TestExpression>
                <JBinaryExpression line="13" type="boolean" operator="||">
                  <Lhs>
                    <JLiteralFalse line="13" type="boolean"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralFalse line="13" type="boolean"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <ThenClause>
                <JBlock line="13">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="14">
                    <JMessageExpression line="14" name="println">
                      <Target>
                        <JFieldSelection line="14" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="14" type="java.lang.String" value="&quot;You didn&#39;t get it!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ThenClause>
              <ElseClause>
                <JBlock line="15">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="16">
                    <JMessageExpression line="16" name="println">
                      <Target>
                        <JFieldSelection line="16" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="16" type="java.lang.String" value="&quot;You got it 3!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ElseClause>
            </JIfStatement>
            <JIfStatement line="18">
              <TestExpression>
                <JBinaryExpression line="18" type="boolean" operator="||">
                  <Lhs>
                    <JLiteralTrue line="18" type="boolean"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralTrue line="18" type="boolean"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <ThenClause>
                <JBlock line="18">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="19">
                    <JMessageExpression line="19" name="println">
                      <Target>
                        <JFieldSelection line="19" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="19" type="java.lang.String" value="&quot;You got it 4!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ThenClause>
            </JIfStatement>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="22" name="a" type="boolean">
                  <Initializer>
                    <JBinaryExpression line="22" type="boolean" operator="||">
                      <Lhs>
                        <JLiteralTrue line="22" type="boolean"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralFalse line="22" type="boolean"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="23">
              <JMessageExpression line="23" name="println">
                <Target>
                  <JFieldSelection line="23" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

Question 4)

Start by adding the appropriate information for the analyze method:

    public JStatement analyze(Context context) {
    	for (JExpression a : sws) {
    		if (a != null) {
	    		a = (JExpression) a.analyze(context);
	    		if (a.type() == Type.CHAR){
	    			a.type().mustMatchExpected(line(), Type.CHAR);
	    		} else {
	    			a.type().mustMatchExpected(line(), Type.INT);
	    		}
    		}
    	}
    	for (ArrayList<JStatement> b : sws3) {
    		if (b != null) {
	    		for (JStatement c : b) {
	    			if (c != null) {
			    		c.analyze(context);
			    		c = (JStatement) c.analyze(context);
	    			}
	    		}
    		}
    	}
//    	condition = (JExpression) condition.analyze(context);
//        condition.type().mustMatchExpected(line(), Type.BOOLEAN);
//        thenPart = (JStatement) thenPart.analyze(context);
//        if (elsePart != null) {
//            elsePart = (JStatement) elsePart.analyze(context);
//        }
        return this;
    }

The test and results are as follows:

import java.lang.System;

public class Switch {
	public static void main(String[] args) {
		System.out.println("test");
		//modification from book page 196
		int a;
		char c = '0';
		switch (c) {
			case '1': 
				a = 2;
			case '0': 
				a = 5;
			case '2': 
				a = 0;
			default : 
				a = 99;
		}
		System.out.println(a);
	}
}

BUILD SUCCESSFUL
Total time: 3 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\Switch.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Switch.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>Switch</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>pass.Switch</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Switch" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="c" offset="2"/>
              </Entries>
            </LocalContext>
            <JStatementExpression line="7">
              <JMessageExpression line="7" name="println">
                <Target>
                  <JFieldSelection line="7" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralString line="7" type="java.lang.String" value="&quot;test&quot;"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="9" name="a" type="int">
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="10" name="c" type="char">
                  <Initializer>
                    <JLiteralChar line="10" type="char" value="&#39;0&#39;"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JSwitchStatement line="11">
              <Case>              <JLiteralChar line="12" type="char" value="&#39;1&#39;"/>
              <JStatementExpression line="13">
                <JBinaryExpression line="13" type="int" operator="=">
                  <Lhs>
                    <JVariable name="a"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralInt line="13" type="int" value="2"/>
                  </Rhs>
                </JBinaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralChar line="14" type="char" value="&#39;0&#39;"/>
              <JStatementExpression line="15">
                <JBinaryExpression line="15" type="int" operator="=">
                  <Lhs>
                    <JVariable name="a"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralInt line="15" type="int" value="5"/>
                  </Rhs>
                </JBinaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralChar line="16" type="char" value="&#39;2&#39;"/>
              <JStatementExpression line="17">
                <JBinaryExpression line="17" type="int" operator="=">
                  <Lhs>
                    <JVariable name="a"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralInt line="17" type="int" value="0"/>
                  </Rhs>
                </JBinaryExpression>
              </JStatementExpression>
              <Default>
              <JStatementExpression line="19">
                <JBinaryExpression line="19" type="int" operator="=">
                  <Lhs>
                    <JVariable name="a"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralInt line="19" type="int" value="99"/>
                  </Rhs>
                </JBinaryExpression>
              </JStatementExpression>
            </JSwitchStatement line="11">
            <JStatementExpression line="21">
              <JMessageExpression line="21" name="println">
                <Target>
                  <JFieldSelection line="21" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

At this point I realized that I had made a mistake and had never included the
main expression next to the word switch in switch statement.

This was added to the parser:

 <JSwitchStatement line="11">
              <JVariable name="c"/>
              <Case>              <JLiteralInt line="12" type="" value="0"/>

And then analysis.

And then it is also added to analysis.

    public JStatement analyze(Context context) {
    	JExpression f = (JExpression) expr.analyze(context);

And the test:

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a  tests\pass\Switch.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Switch.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>Switch</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>pass.Switch</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Switch" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="c" offset="2"/>
              </Entries>
            </LocalContext>
            <JStatementExpression line="7">
              <JMessageExpression line="7" name="println">
                <Target>
                  <JFieldSelection line="7" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralString line="7" type="java.lang.String" value="&quot;test&quot;"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="9" name="a" type="int">
                  <Initializer>
                    <JLiteralInt line="9" type="int" value="5"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="10" name="c" type="int">
                  <Initializer>
                    <JLiteralInt line="10" type="int" value="1"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JSwitchStatement line="11">
              <JVariable name="c"/>
              <Case>              <JLiteralInt line="12" type="int" value="0"/>
              <JStatementExpression line="13">
                <JUnaryExpression line="13" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralInt line="14" type="int" value="1"/>
              <JStatementExpression line="15">
                <JUnaryExpression line="15" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralInt line="16" type="int" value="2"/>
              <JStatementExpression line="17">
                <JUnaryExpression line="17" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Default>
              <JStatementExpression line="19">
                <JUnaryExpression line="19" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
            </JSwitchStatement line="11">
            <JStatementExpression line="21">
              <JMessageExpression line="21" name="println">
                <Target>
                  <JFieldSelection line="21" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

   public void codegen(CLEmitter output) {
    	//from CLEmitter
    	/**
         * Add a TABLESWITCH instruction -- used for switch statements.
         * 
         * @param defaultLabel
         *            jump label for default value.
         * @param low
         *            smallest value of index.
         * @param high
         *            highest value of index.
         * @param labels
         *            list of jump labels for each index value from low to high, end
         *            values included.
         */
//    	output.addTABLESWITCHInstruction(String defaultLabel, int low,
//                int high, ArrayList<String> labels) {
//    	private ArrayList<JExpression> sws;//holds case and default
//    	private ArrayList<ArrayList<JStatement>> sws3;//holds expressions
    	
//    	System.out.println(sws.get(0));
//    	JLiteralChar foo =  (JLiteralChar) sws.get(0);
//    	System.out.println(foo.getLiteral());
    	
    	//the results of this will go in int low arg
    	int lowest = 9;
    	int highest = 0;
    	boolean isInt = false;
    	char lowestC = '9';
    	char highestC = '0';
    	boolean isChar = false;
    	String lowestS = "0";
    	boolean isString = false;
    	for (JExpression s : sws) {
    		if (s != null) {
	    		if (s.type() == Type.CHAR) {
	    			JLiteralChar foo =  (JLiteralChar) s;
	    			if (!isChar) {
	    				lowestC = foo.getLiteral();
	    				highestC = foo.getLiteral();
	    				isChar = true;
	    			}
	    			else if (foo.getLiteral() < lowestC) {
	    				lowestC = foo.getLiteral();
	    			}
	    			else if (foo.getLiteral() > highestC) {
	    				highestC = foo.getLiteral();
	    			}
	    		} else { //if (s.type() == Type.INT){ //it is an int
	    			JLiteralInt foo =  (JLiteralInt) s;
	    			if (!isInt) {
	    				lowest = foo.getLiteral();
	    				highest = foo.getLiteral();
	    				isInt = true;
	    			}
	    			else if (foo.getLiteral() < lowest) {
	    				lowest = foo.getLiteral();
	    			}
	    			else if (foo.getLiteral() > highest) {
	    				highest = foo.getLiteral();
	    			}
	    		} 
    		}
    	}
    		
		ArrayList<String> labels = new ArrayList<String>();
		int g = 1;
		for (JExpression so : sws) {
    		if (so != null) {
    			if (so.type() == Type.CHAR) {
	    			JLiteralChar foo =  (JLiteralChar) so;
	    			labels.add(Integer.toString(g));//foo.getLiteral()));
    			} else {
    				JLiteralInt foo =  (JLiteralInt) so;
	    			labels.add(Integer.toString(g));//foo.getLiteral()));
	    			//System.out.println("wrote " + g);
    			}
    		}
    		g++;
		}
		
		g--;//default is one two high
		expr.codegen(output);//the main expression next to switch
		//System.out.println("outside booleans");
		if (isInt && isChar) {//uses a mix of ints and chars
    		if (lowestC < lowest) {
    			lowest = lowestC;
    		}
    		if (highestC > highest) {
    			highest = highestC;
    		}
    		//System.out.println("inside if");
    		output.addTABLESWITCHInstruction(Integer.toString(g), lowest, highest, labels);
    	}
		else if (isInt && !isChar) {//just ints
			//System.out.println(Integer.toString(g));
			output.addTABLESWITCHInstruction(Integer.toString(g), lowest, highest, labels);
		} else {
//			ArrayList<String> labels2 = new ArrayList<String>();
//			labels2.add("1");
//			labels2.add("2");
//			labels2.add("3");
//			//labels2.add("default");
//			for(ArrayList<JStatement> a : sws3) {
//				for (JStatement b : a)
//					labels2.add(b.context().offset());
//			}
			System.out.println("inside else");
			output.addTABLESWITCHInstruction(Integer.toString(g), lowestC, highestC, labels);
		}
			
		int f = 1;
		for(ArrayList<JStatement> a : sws3) {
			for (JStatement b : a){
				output.addLabel(Integer.toString(f++));
				b.codegen(output);
				//System.out.println("writing " + f);
				//f++;
			}
		}
    		
		//System.out.println(labels.toString());
    		//Can't use String in j--
//    		else { //it is aString
//    			JLiteralString foo =  (JLiteralString) s;
//    			if (!isString) {
//    				lowestS = foo.getLiteral();
//    				isString = true;
//    			}
//    			else if (foo.getLiteral().compareTo(lowestS) < 0) {
//    				lowestS = foo.getLiteral();
//    			}
//    		}
    	
    	
    	//TESTS
//    	System.out.println(lowestC);
//    	System.out.println(lowest);
//    	System.out.println(highestC);
//    	System.out.println(highest);
//    	System.out.println();
    	//output.addTABLESWITCHInstruction("default", 
    	//it appears that it only builds the table.  The actual instructions also 
    	//still need to be written

    }

Results:

BUILD SUCCESSFUL
Total time: 6 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Switch.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Switch
Error: A JNI error has occurred, please check your installation and try again
Exception in thread "main" java.lang.VerifyError: (class: pass/Switch, method: main signature: ([Ljava/lang/String;)V) Illegal instruction found at offset 23
        at java.lang.Class.getDeclaredMethods0(Native Method)
        at java.lang.Class.privateGetDeclaredMethods(Unknown Source)
        at java.lang.Class.privateGetMethodRecursive(Unknown Source)
        at java.lang.Class.getMethod0(Unknown Source)
        at java.lang.Class.getMethod(Unknown Source)
        at sun.launcher.LauncherHelper.validateMainClass(Unknown Source)
        at sun.launcher.LauncherHelper.checkAndLoadMain(Unknown Source)

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose  pass.Switch
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Switch.class
  Last modified Nov 21, 2016; size 400 bytes
  MD5 checksum 7e96e0c4c009b28ffa7989ce3d7d0748
public class pass.Switch
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Switch
   #2 = Class              #1             // pass/Switch
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               test
  #19 = String             #18            // test
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (Ljava/lang/String;)V
  #24 = NameAndType        #22:#23        // println:(Ljava/lang/String;)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #26 = Utf8               (I)V
  #27 = NameAndType        #22:#26        // println:(I)V
  #28 = Methodref          #21.#27        // java/io/PrintStream.println:(I)V
{
  public pass.Switch();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=4, args_size=1
         0: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #19                 // String test
         5: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: iconst_5
         9: istore_1
        10: iconst_1
        11: istore_2
        12: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        15: iload_1
        16: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
        19: bipush        99
        21: istore_3
        22: iload_3
Error: A serious internal error has occurred: java.lang.NegativeArraySizeException
Please file a bug report, and include the following information:
java.lang.NegativeArraySizeException
        at com.sun.tools.classfile.Instruction.accept(Instruction.java:288)
        at com.sun.tools.javap.CodeWriter.writeInstr(CodeWriter.java:126)
        at com.sun.tools.javap.CodeWriter.writeInstrs(CodeWriter.java:108)
        at com.sun.tools.javap.CodeWriter.write(CodeWriter.java:75)
        at com.sun.tools.javap.AttributeWriter.visitCode(AttributeWriter.java:220)
        at com.sun.tools.javap.AttributeWriter.visitCode(AttributeWriter.java:75)
        at com.sun.tools.classfile.Code_attribute.accept(Code_attribute.java:102)
        at com.sun.tools.javap.AttributeWriter.write(AttributeWriter.java:101)
        at com.sun.tools.javap.ClassWriter.writeMethod(ClassWriter.java:508)
        at com.sun.tools.javap.ClassWriter.writeMethods(ClassWriter.java:412)
        at com.sun.tools.javap.ClassWriter.write(ClassWriter.java:217)
        at com.sun.tools.javap.JavapTask.write(JavapTask.java:784)
        at com.sun.tools.javap.JavapTask.writeClass(JavapTask.java:606)
        at com.sun.tools.javap.JavapTask.run(JavapTask.java:560)
        at com.sun.tools.javap.JavapTask.run(JavapTask.java:423)
        at com.sun.tools.javap.Main.main(Main.java:46)


C:\Users\bwils_000\Desktop\eclipse projects\j-->

Finally, I made the necessary modifications to analyze and codegen.  In order
to solve it, it is important to correctly understand how tableSwitch and
lookupSwitch work.  Professor Iyer was a very useful resource for solving this
since he created the method.  The most important keys to recognize are that
labels have to be created and added both within and below the switch table.
Further, lookupSwitch can solve for any switch but tableSwitch can only solve
for switches that are in sequence.  If you use tableSwitch for a partial
sequence, then codegen must have a way to complete the part of the code that is
not in sequence.  Here are the modifications, tests, and results:

    public JStatement analyze(Context context) {
    	JExpression f = (JExpression) expr.analyze(context);
    	
    	for (JExpression a : sws) {
    		if (a != null) {
	    		a = (JExpression) a.analyze(context);
	    		if (a.type() == Type.CHAR){
	    			a.type().mustMatchExpected(line(), Type.CHAR);
	    		} else {
	    			a.type().mustMatchExpected(line(), Type.INT);
	    		}
    		}
    	}
    	for (ArrayList<JStatement> b : sws3) {
    		if (b != null) {
	    		for (JStatement c : b) {
	    			if (c != null) {
			    		c.analyze(context);
			    		c = (JStatement) c.analyze(context);
	    			}
	    		}
    		}
    	}
//    	condition = (JExpression) condition.analyze(context);
//        condition.type().mustMatchExpected(line(), Type.BOOLEAN);
//        thenPart = (JStatement) thenPart.analyze(context);
//        if (elsePart != null) {
//            elsePart = (JStatement) elsePart.analyze(context);
//        }
        return this;
    }

    /**
     * Generate code for the return statement. In the case of
     * void method types, generate a simple (void) return. In the
     * case of a return expression, generate code to load that
     * onto the stack and then generate the appropriate return
     * instruction.
     * 
     * @param output
     *                the code emitter (basically an abstraction
     *                for producing the .class file).
     */

    public void codegen(CLEmitter output) {
    	//from CLEmitter
    	/**
         * Add a TABLESWITCH instruction -- used for switch statements.
         * 
         * @param defaultLabel
         *            jump label for default value.
         * @param low
         *            smallest value of index.
         * @param high
         *            highest value of index.
         * @param labels
         *            list of jump labels for each index value from low to high, end
         *            values included.
         */
//    	output.addTABLESWITCHInstruction(String defaultLabel, int low,
//                int high, ArrayList<String> labels) {
//    	private ArrayList<JExpression> sws;//holds case and default
//    	private ArrayList<ArrayList<JStatement>> sws3;//holds expressions
    	
//    	System.out.println(sws.get(0));
//    	JLiteralChar foo =  (JLiteralChar) sws.get(0);
//    	System.out.println(foo.getLiteral());
    	
    	//the results of this will go in int low arg
    	int lowest = 9;
    	int highest = 0;
    	boolean isInt = false;
    	char lowestC = '9';
    	char highestC = '0';
    	boolean isChar = false;
    	String lowestS = "0";
    	boolean isString = false;
    	for (JExpression s : sws) {
    		if (s != null) {
	    		if (s.type() == Type.CHAR) {
	    			JLiteralChar foo =  (JLiteralChar) s;
	    			if (!isChar) {
	    				lowestC = foo.getLiteral();
	    				highestC = foo.getLiteral();
	    				isChar = true;
	    			}
	    			else if (foo.getLiteral() < lowestC) {
	    				lowestC = foo.getLiteral();
	    			}
	    			else if (foo.getLiteral() > highestC) {
	    				highestC = foo.getLiteral();
	    			}
	    		} else { //if (s.type() == Type.INT){ //it is an int
	    			JLiteralInt foo =  (JLiteralInt) s;
	    			if (!isInt) {
	    				lowest = foo.getLiteral();
	    				highest = foo.getLiteral();
	    				isInt = true;
	    			}
	    			else if (foo.getLiteral() < lowest) {
	    				lowest = foo.getLiteral();
	    			}
	    			else if (foo.getLiteral() > highest) {
	    				highest = foo.getLiteral();
	    			}
	    		} 
    		}
    	}
    		
		ArrayList<String> labels = new ArrayList<String>();
		TreeMap<Integer, String> labels2 = new TreeMap<Integer, String>();
		int g = 1;
		for (JExpression so : sws) {
    		if (so != null) {
    			if (so.type() == Type.CHAR) {
	    			JLiteralChar fooC =  (JLiteralChar) so;
	    			labels.add(output.createLabel());
	    			int conv =  (int) fooC.getLiteral();
	    			labels2.put(conv, labels.get(g - 1));
	    			//labels.add(Integer.toString(g));//foo.getLiteral()));
    			} else {
    				JLiteralInt foo =  (JLiteralInt) so;
	    			//labels.add(Integer.toString(g));//foo.getLiteral()));
	    			//System.out.println("wrote " + g);
	    			JLiteralInt soI = (JLiteralInt) so;
	    			//System.out.println(soI.getLiteral());
	    			labels.add(output.createLabel());
	    			labels2.put(soI.getLiteral(), labels.get(g - 1));
    			}
    		}
    		g++;
		}
		
		//add default
		labels.add(output.createLabel());
		g--;//default is one two high
		//labels2.put(g, Integer.toString(g));
		
		expr.codegen(output);//the main expression next to switch
		//System.out.println("outside booleans");
		if (isInt && isChar) {//uses a mix of ints and chars
			//j-- doesn't currenlty support a mix, but this could be used for future updates
    		if (lowestC < lowest) {
    			lowest = lowestC;
    		}
    		if (highestC > highest) {
    			highest = highestC;
    		}
    		//System.out.println("inside if");
    		//output.addTABLESWITCHInstruction(labels.get(g - 1), lowest, highest, labels);
    		output.addLOOKUPSWITCHInstruction(labels.get(g - 1), labels2.size(), labels2);
    	}
		else if (isInt && !isChar) {//just ints
			//System.out.println(Integer.toString(g));
			//output.addTABLESWITCHInstruction(Integer.toString(g), lowest, highest, labels);
			output.addLOOKUPSWITCHInstruction(labels.get(g - 1), labels2.size(), labels2);
		} else {
//			ArrayList<String> labels2 = new ArrayList<String>();
//			labels2.add("1");
//			labels2.add("2");
//			labels2.add("3");
//			//labels2.add("default");
//			for(ArrayList<JStatement> a : sws3) {
//				for (JStatement b : a)
//					labels2.add(b.context().offset());
//			}
			//System.out.println("inside else");
			output.addLOOKUPSWITCHInstruction(labels.get(g - 1), labels2.size(), labels2);
			//output.addTABLESWITCHInstruction(Integer.toString(g), lowestC, highestC, labels);
		}
			
		int f = 0;
		for(ArrayList<JStatement> a : sws3) {
			for (JStatement b : a){
				output.addLabel(labels.get(f++));//(Integer.toString(f++));
				b.codegen(output);
				//System.out.println("writing " + f);
				//f++;
			}
		}
    		
		//System.out.println(labels.toString());
    		//Can't use String in j--
//    		else { //it is aString
//    			JLiteralString foo =  (JLiteralString) s;
//    			if (!isString) {
//    				lowestS = foo.getLiteral();
//    				isString = true;
//    			}
//    			else if (foo.getLiteral().compareTo(lowestS) < 0) {
//    				lowestS = foo.getLiteral();
//    			}
//    		}
    	
    	
    	//TESTS
//    	System.out.println(lowestC);
//    	System.out.println(lowest);
//    	System.out.println(highestC);
//    	System.out.println(highest);
//    	System.out.println();
    	//output.addTABLESWITCHInstruction("default", 
    	//it appears that it only builds the table.  The actual instructions also 
    	//still need to be written

    }

package pass;

import java.lang.System;

public class Switch {
	public static void main(String[] args) {
		System.out.println("test");
		//modification from book page 196
		int a = 5;
		
		int d = 99;
		switch (d) {
			case 0:
				d--;
			case 3:
				d--;
			default :
				d--;
		}
		
		int c = 1;
		switch (c) {
			case 0: 
				a--;
			case 1: 
				a--;
			case 2: 
				a--;
			default : 
				a--;
		}
		System.out.println(a);
		
		char h = 'h';
		switch (h) {
			case 'q':
				d--;
			case 'z':
				d--;
			default :
				d--;
		}
		System.out.println(h);
		
		//j-- does not appear to currently support a mix
		//of chars or ints.
//		char p = 'p';
//		switch (p) {
//			case 'p':
//				d--;
//			case 4:
//				d--;
//			default :
//				d--;
//		}
//		System.out.println(h);

	} 
}

BUILD SUCCESSFUL
Total time: 1 second

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Switch.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Switch
test
2
h

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Switch
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Switch.class
  Last modified Nov 22, 2016; size 517 bytes
  MD5 checksum 083f9d628cd1483b448658843b89ea71
public class pass.Switch
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Switch
   #2 = Class              #1             // pass/Switch
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               test
  #19 = String             #18            // test
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (Ljava/lang/String;)V
  #24 = NameAndType        #22:#23        // println:(Ljava/lang/String;)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #26 = Utf8               (I)V
  #27 = NameAndType        #22:#26        // println:(I)V
  #28 = Methodref          #21.#27        // java/io/PrintStream.println:(I)V
  #29 = Utf8               (C)V
  #30 = NameAndType        #22:#29        // println:(C)V
  #31 = Methodref          #21.#30        // java/io/PrintStream.println:(C)V
{
  public pass.Switch();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=5, args_size=1
         0: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #19                 // String test
         5: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: iconst_5
         9: istore_1
        10: bipush        99
        12: istore_2
        13: iload_2
        14: lookupswitch  { // 2
                       0: 40
                       3: 43
                 default: 46
            }
        40: iinc          2, -1
        43: iinc          2, -1
        46: iinc          2, -1
        49: iconst_1
        50: istore_3
        51: iload_3
        52: lookupswitch  { // 3
                       0: 88
                       1: 91
                       2: 94
                 default: 97
            }
        88: iinc          1, -1
        91: iinc          1, -1
        94: iinc          1, -1
        97: iinc          1, -1
       100: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       103: iload_1
       104: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
       107: bipush        104
       109: istore        4
       111: iload         4
       113: lookupswitch  { // 2
                     113: 140
                     122: 143
                 default: 146
            }
       140: iinc          2, -1
       143: iinc          2, -1
       146: iinc          2, -1
       149: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       152: iload         4
       154: invokevirtual #31                 // Method java/io/PrintStream.println:(C)V
       157: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\Switch.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Switch.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>Switch</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>pass.Switch</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Switch" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="c" offset="3"/>
                <Entry name="d" offset="2"/>
                <Entry name="h" offset="4"/>
              </Entries>
            </LocalContext>
            <JStatementExpression line="7">
              <JMessageExpression line="7" name="println">
                <Target>
                  <JFieldSelection line="7" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralString line="7" type="java.lang.String" value="&quot;test&quot;"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="9" name="a" type="int">
                  <Initializer>
                    <JLiteralInt line="9" type="int" value="5"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="11" name="d" type="int">
                  <Initializer>
                    <JLiteralInt line="11" type="int" value="99"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JSwitchStatement line="12">
              <JVariable name="d"/>
              <Case>              <JLiteralInt line="13" type="int" value="0"/>
              <JStatementExpression line="14">
                <JUnaryExpression line="14" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralInt line="15" type="int" value="3"/>
              <JStatementExpression line="16">
                <JUnaryExpression line="16" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Default>
              <JStatementExpression line="18">
                <JUnaryExpression line="18" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
            </JSwitchStatement line="12">
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="21" name="c" type="int">
                  <Initializer>
                    <JLiteralInt line="21" type="int" value="1"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JSwitchStatement line="22">
              <JVariable name="c"/>
              <Case>              <JLiteralInt line="23" type="int" value="0"/>
              <JStatementExpression line="24">
                <JUnaryExpression line="24" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralInt line="25" type="int" value="1"/>
              <JStatementExpression line="26">
                <JUnaryExpression line="26" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralInt line="27" type="int" value="2"/>
              <JStatementExpression line="28">
                <JUnaryExpression line="28" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Default>
              <JStatementExpression line="30">
                <JUnaryExpression line="30" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
            </JSwitchStatement line="22">
            <JStatementExpression line="32">
              <JMessageExpression line="32" name="println">
                <Target>
                  <JFieldSelection line="32" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="34" name="h" type="char">
                  <Initializer>
                    <JLiteralChar line="34" type="char" value="&#39;h&#39;"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JSwitchStatement line="35">
              <JVariable name="h"/>
              <Case>              <JLiteralChar line="36" type="char" value="&#39;q&#39;"/>
              <JStatementExpression line="37">
                <JUnaryExpression line="37" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralChar line="38" type="char" value="&#39;z&#39;"/>
              <JStatementExpression line="39">
                <JUnaryExpression line="39" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Default>
              <JStatementExpression line="41">
                <JUnaryExpression line="41" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
            </JSwitchStatement line="35">
            <JStatementExpression line="43">
              <JMessageExpression line="43" name="println">
                <Target>
                  <JFieldSelection line="43" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="h"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

Question 5)

The changes that need to be made to switch are entirely within the scope of
codegen.  In instances of JBreakStatement add a goto as well as a label at the
bottom of the switch statement.  The changes, updated test, and results are as
follows:

		int f = 0;
		boolean hasBreak = false;
		String done = output.createLabel();
		for(ArrayList<JStatement> a : sws3) {
			output.addLabel(labels.get(f++));
			for (JStatement b : a){
				//output.addLabel(labels.get(f++));//(Integer.toString(f++));
				if (b instanceof JBreakStatement) {
					//done = output.createLabel();
					output.addBranchInstruction(GOTO, done);
					hasBreak = true;
				} else {
					b.codegen(output);
				}
				//System.out.println("writing " + f);
				//f++;
			}
		}
		if (hasBreak){
			output.addLabel(done);
		}

package pass;

import java.lang.System;

public class Switch {
	public static void main(String[] args) {
		System.out.println("test");
		//modification from book page 196
		int a = 5;
		
		int d = 99;
		switch (d) {
			case 0:
				d--;
			case 3:
				d--;
			default :
				d--;
		}
		
		int c = 1;
		switch (c) {
			case 0: 
				a--;
				break;
			case 1: 
				a--;
				break;
			case 2: 
				a--;
				break;
			default : 
				a--;
		}
		System.out.println(a);
		
		char h = 'h';
		switch (h) {
			case 'q':
				break;
				d--;
			case 'z':
				d--;
			default :
				d--;
		}
		System.out.println(h);
		
		//j-- does not appear to currently support a mix
		//of chars or ints.
//		char p = 'p';
//		switch (p) {
//			case 'p':
//				d--;
//			case 4:
//				d--;
//			default :
//				d--;
//		}
//		System.out.println(h);

	} 
}

BUILD SUCCESSFUL
Total time: 3 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  tests\pass\Switch.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Switch
test
4
h

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Switch
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Switch.class
  Last modified Nov 24, 2016; size 528 bytes
  MD5 checksum 60310a43cc9b69de31a185ed96d80b4e
public class pass.Switch
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Switch
   #2 = Class              #1             // pass/Switch
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               test
  #19 = String             #18            // test
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (Ljava/lang/String;)V
  #24 = NameAndType        #22:#23        // println:(Ljava/lang/String;)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #26 = Utf8               (I)V
  #27 = NameAndType        #22:#26        // println:(I)V
  #28 = Methodref          #21.#27        // java/io/PrintStream.println:(I)V
  #29 = Utf8               (C)V
  #30 = NameAndType        #22:#29        // println:(C)V
  #31 = Methodref          #21.#30        // java/io/PrintStream.println:(C)V
{
  public pass.Switch();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=5, args_size=1
         0: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #19                 // String test
         5: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: iconst_5
         9: istore_1
        10: bipush        99
        12: istore_2
        13: iload_2
        14: lookupswitch  { // 2
                       0: 40
                       3: 43
                 default: 46
            }
        40: iinc          2, -1
        43: iinc          2, -1
        46: iinc          2, -1
        49: iconst_1
        50: istore_3
        51: iload_3
        52: lookupswitch  { // 3
                       0: 88
                       1: 94
                       2: 100
                 default: 106
            }
        88: iinc          1, -1
        91: goto          109
        94: iinc          1, -1
        97: goto          109
       100: iinc          1, -1
       103: goto          109
       106: iinc          1, -1
       109: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       112: iload_1
       113: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
       116: bipush        104
       118: istore        4
       120: iload         4
       122: lookupswitch  { // 2
                     113: 148
                     122: 154
                 default: 157
            }
       148: goto          160
       151: iinc          2, -1
       154: iinc          2, -1
       157: iinc          2, -1
       160: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       163: iload         4
       165: invokevirtual #31                 // Method java/io/PrintStream.println:(C)V
       168: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j--  -a tests\pass\Switch.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Switch.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>Switch</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>pass.Switch</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Switch" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="c" offset="3"/>
                <Entry name="d" offset="2"/>
                <Entry name="h" offset="4"/>
              </Entries>
            </LocalContext>
            <JStatementExpression line="7">
              <JMessageExpression line="7" name="println">
                <Target>
                  <JFieldSelection line="7" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralString line="7" type="java.lang.String" value="&quot;test&quot;"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="9" name="a" type="int">
                  <Initializer>
                    <JLiteralInt line="9" type="int" value="5"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="11" name="d" type="int">
                  <Initializer>
                    <JLiteralInt line="11" type="int" value="99"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JSwitchStatement line="12">
              <JVariable name="d"/>
              <Case>              <JLiteralInt line="13" type="int" value="0"/>
              <JStatementExpression line="14">
                <JUnaryExpression line="14" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralInt line="15" type="int" value="3"/>
              <JStatementExpression line="16">
                <JUnaryExpression line="16" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Default>
              <JStatementExpression line="18">
                <JUnaryExpression line="18" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
            </JSwitchStatement line="12">
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="21" name="c" type="int">
                  <Initializer>
                    <JLiteralInt line="21" type="int" value="1"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JSwitchStatement line="22">
              <JVariable name="c"/>
              <Case>              <JLiteralInt line="23" type="int" value="0"/>
              <JStatementExpression line="24">
                <JUnaryExpression line="24" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <JBreakStatement line="25"/>
              <JEmptyStatement line="25"/>
              <Case>              <JLiteralInt line="26" type="int" value="1"/>
              <JStatementExpression line="27">
                <JUnaryExpression line="27" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <JBreakStatement line="28"/>
              <JEmptyStatement line="28"/>
              <Case>              <JLiteralInt line="29" type="int" value="2"/>
              <JStatementExpression line="30">
                <JUnaryExpression line="30" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <JBreakStatement line="31"/>
              <JEmptyStatement line="31"/>
              <Default>
              <JStatementExpression line="33">
                <JUnaryExpression line="33" type="int" operator="post--">
                  <Operand>
                    <JVariable name="a"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
            </JSwitchStatement line="22">
            <JStatementExpression line="35">
              <JMessageExpression line="35" name="println">
                <Target>
                  <JFieldSelection line="35" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="37" name="h" type="char">
                  <Initializer>
                    <JLiteralChar line="37" type="char" value="&#39;h&#39;"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JSwitchStatement line="38">
              <JVariable name="h"/>
              <Case>              <JLiteralChar line="39" type="char" value="&#39;q&#39;"/>
              <JBreakStatement line="40"/>
              <JEmptyStatement line="40"/>
              <JStatementExpression line="41">
                <JUnaryExpression line="41" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Case>              <JLiteralChar line="42" type="char" value="&#39;z&#39;"/>
              <JStatementExpression line="43">
                <JUnaryExpression line="43" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
              <Default>
              <JStatementExpression line="45">
                <JUnaryExpression line="45" type="int" operator="post--">
                  <Operand>
                    <JVariable name="d"/>
                  </Operand>
                </JUnaryExpression>
              </JStatementExpression>
            </JSwitchStatement line="38">
            <JStatementExpression line="47">
              <JMessageExpression line="47" name="println">
                <Target>
                  <JFieldSelection line="47" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="h"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

Question 6)

The analysis method of JForStatement is fairly complex.  It requires
modifications based on JMethodDeclaration, JVariableDeclaration, JBlock and
JWhileStatement:

public JStatement analyze(Context context) {
		if (init != null) {//note that this is a Variable Declarator so,
			this.context2 = new LocalContext(context);
			//YOU NEED TO LOOK AT HOW METHOD CONTEXT IS BUILT
			
//			public JVariableDeclarator analyze(Context context) {
//		        // Not used. Analysis is done further up the tree.
//		        return this;
//		    }
			for (JVariableDeclarator decl : init) {
				LocalVariableDefn defn = new LocalVariableDefn(decl.type(), 
		                this.context2.offset());
		        defn.initialize();
		        this.context2.addEntry(decl.line(), decl.name(), defn);
				//System.out.println(decl);
				//decl.writeToStdOut(p);
				decl.setType(decl.type().resolve(this.context2));
			//}
				// All initializations must be turned into assignment
	            // statements and analyzed
//				decl.initializer();
//				System.out.println(decl.toString());
	            if (decl.initializer() != null) {
	                JAssignOp assignOp = new JAssignOp(decl.line(), new JVariable(
	                        decl.line(), decl.name()), decl.initializer());
	                assignOp.isStatementExpression = true;
	                assignOp.analyze(this.context2);
//	                LocalVariableDefn assignOp2 = (LocalVariableDefn) assignOp;
	                //decl.analyze(context);
	                //decl.writeToStdOut(p);
	                initializations.add(
	                		new JStatementExpression(decl.line(), 
	                		assignOp).analyze(this.context2));
	            }
			}
		} else if (initS != null) {
			for (int i = 0; i < initS.size(); i++) {
				initS.set(i, (JStatement) initS.get(i).analyze(context));
			}
		}
		if (test != null) {
			if (init != null) {
				test = test.analyze(this.context2);
			} else {
				test = test.analyze(context);
			}
	        test.type().mustMatchExpected(line(), Type.BOOLEAN);
		}
		if (update != null){
			if (init != null) {
				for (int i = 0; i < update.size(); i ++) {
					update.set(i, (JStatement) update.get(i).analyze(this.context2));
				}
			} else {
				for (int i = 0; i < update.size(); i ++) {
					update.set(i, (JStatement) update.get(i).analyze(context));
				}
			}
		}
		if (express != null) {
			if (init != null) {
				express = (JStatement) express.analyze(this.context2);
			} else {
				express = (JStatement) express.analyze(context);
			}
		}
		return this;
	}

Also, these must be added up top:

private ArrayList<JStatement> initializations = new ArrayList<JStatement>();
    
    private LocalContext context2;

It also requires a change to writeToStdOut to acknowledge the new potential
local context.

public void writeToStdOut(PrettyPrinter p) {
		p.printf("<JForStatement line=\"%d\">\n", line());
		p.indentRight();
        p.printf("<InitialValue>\n");
        if (init != null){
	        p.indentRight();
	        for (JVariableDeclarator s : init) {
	        	s.writeToStdOut(p);
	        }
	        if (context2 != null) {
	            context2.writeToStdOut(p);
	        }
	        p.indentLeft();
...

Here are the test results:

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\For.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\For.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>For</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>pass.For</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="3" name="For" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="4" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="4" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="4">
            <LocalContext>
              <Entries>
                <Entry name="i" offset="1"/>
              </Entries>
            </LocalContext>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="5" name="i" type="int">
                  <Initializer>
                    <JLiteralInt line="5" type="int" value="0"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JForStatement line="6">
              <InitialValue>
                <JStatementExpression line="6">
                  <JBinaryExpression line="6" type="int" operator="=">
                    <Lhs>
                      <JVariable name="i"/>
                    </Lhs>
                    <Rhs>
                      <JLiteralInt line="6" type="int" value="0"/>
                    </Rhs>
                  </JBinaryExpression>
                </JStatementExpression>
              </InitialValue>
              <Test>
                <JBinaryExpression line="6" type="boolean" operator="&gt;">
                  <Lhs>
                    <JLiteralInt line="6" type="int" value="3"/>
                  </Lhs>
                  <Rhs>
                    <JVariable name="i"/>
                  </Rhs>
                </JBinaryExpression>
              </Test>
              <Update>
                <JStatementExpression line="6">
                  <JUnaryExpression line="6" type="" operator="post--">
                    <Operand>
                      <JVariable name="i"/>
                    </Operand>
                  </JUnaryExpression>
                </JStatementExpression>
              </Update>
            <Express>
              <JBlock line="6">
                <LocalContext>
                  <Entries>
                  </Entries>
                </LocalContext>
              </JBlock>
            </express>
            </JForStatement>
            <JForStatement line="10">
              <InitialValue>
                <JVariableDeclarator line="10" name="j" type="int">
                  <Initializer>
                    <JLiteralInt line="10" type="int" value="0"/>
                  </Initializer>
                </JVariableDeclarator>
                <LocalContext>
                  <Entries>
                    <Entry name="j" offset="2"/>
                  </Entries>
                </LocalContext>
              </InitialValue>
              <Test>
                <JBinaryExpression line="11" type="boolean" operator="&gt;">
                  <Lhs>
                    <JLiteralInt line="11" type="int" value="3"/>
                  </Lhs>
                  <Rhs>
                    <JVariable name="j"/>
                  </Rhs>
                </JBinaryExpression>
              </Test>
              <Update>
                <JStatementExpression line="12">
                  <JUnaryExpression line="12" type="" operator="post--">
                    <Operand>
                      <JVariable name="j"/>
                    </Operand>
                  </JUnaryExpression>
                </JStatementExpression>
              </Update>
            <Express>
              <JBlock line="12">
                <LocalContext>
                  <Entries>
                  </Entries>
                </LocalContext>
              </JBlock>
            </express>
            </JForStatement>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->


Codegen is written based on while as follows:

public void codegen(CLEmitter output) {
		// Need two labels
		//String initial = output.createLabel();
		//execute the initializations
//		if (init != null) {
//			for (JVariableDeclarator decl : init) {
//				decl.codgen(output);
//				//codegen is empty for JVariableDeclarator
//			}
//		}
		
		if (initS != null) {
			for (int i = 0; i < initS.size(); i++) {
				initS.get(i).codegen(output);
			}
		} else if (init != null) {
			for (int i = 0; i < initializations.size(); i++) {
				initializations.get(i).codegen(output);
			}
		}
		
        String testLabel = output.createLabel();
        String out = output.createLabel();

        // Branch out of the loop on the test condition
        // being false
        //output.addLabel(initial);
        output.addLabel(testLabel);
        test.codegen(output, out, false);

        // Codegen body
        express.codegen(output);
        //update it
        for (int i = 0; i < update.size(); i ++) {
        	update.get(i).codegen(output);
        }
        

        // Unconditional jump back up to test
        output.addBranchInstruction(GOTO, testLabel);

        // The label below and outside the loop
        output.addLabel(out);
	}

The final tests and results are as follows:

package pass;

import java.lang.System;

public class For {
	public static void main (String[] args){
		System.out.println("print");
		int i = 0;
		for (i = 6; i > 3; i--) {
			System.out.println(i);
		}
		
		for (int j = 6; 
				j > 3; 
				j--) {
			System.out.println(i);
		}
	}
}

C:\Users\bwils_000\Desktop\eclipse projects\j--\classes>java pass.For
print
6
5
4
3
3
3

C:\Users\bwils_000\Desktop\eclipse projects\j--\classes>javap pass\For
Warning: Binary file pass\For contains pass.For
public class pass.For {
  public pass.For();
  public static void main(java.lang.String[]);
}

C:\Users\bwils_000\Desktop\eclipse projects\j--\classes>javap -verbose pass\For
Warning: Binary file pass\For contains pass.For
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/classes/pass/For.class
  Last modified Nov 2, 2016; size 393 bytes
  MD5 checksum bf6ccebfc7926538e8fb057b87c0ef80
public class pass.For
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/For
   #2 = Class              #1             // pass/For
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               print
  #19 = String             #18            // print
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (Ljava/lang/String;)V
  #24 = NameAndType        #22:#23        // println:(Ljava/lang/String;)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #26 = Utf8               (I)V
  #27 = NameAndType        #22:#26        // println:(I)V
  #28 = Methodref          #21.#27        // java/io/PrintStream.println:(I)V
{
  public pass.For();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=3, args_size=1
         0: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #19                 // String print
         5: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: iconst_0
         9: istore_1
        10: bipush        6
        12: istore_1
        13: iload_1
        14: iconst_3
        15: if_icmple     31
        18: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        21: iload_1
        22: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
        25: iinc          1, -1
        28: goto          13
        31: bipush        6
        33: istore_2
        34: iload_2
        35: iconst_3
        36: if_icmple     52
        39: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        42: iload_1
        43: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
        46: iinc          2, -1
        49: goto          34
        52: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j--\classes>

YOU STILL NEED TO TEST FOR EMPTY INITIALIZATION, TESTS, AND UPDATES.

Also,

package pass;

import java.lang.System;

public class For {
 public static void main (String[] args){
  System.out.println("print");
  int i = 0;
  for (i = 6; i > 3; i--) {
   System.out.println(i);
  }
  
  for (int j = 6; 
    j > 3; 
    j--) {
   System.out.println(i);
  }
  
    for(; i > 2;){
   System.out.println("just once");
   i--;
  }
  
//    for(;;){
//    }
//    
//    for(;;) //causes infinity
//        System.out.println("just once");
 }
}

Yields,

C:\Users\bwils_000\Desktop\eclipse projects\j--\classes>java pass.For
print
6
5
4
3
3
3
just once


Question 7)

In order to catch the break statement in for and while loops, it helpful to
notice that JBlock has a statements methods that returns all the statements in
the block.  So rather than run codegen in JBlock, the codegen that JBlock would
run is run directly in JForStatement or JWhileStatement.  If JBlock is not used
then the JStatement is tested for being a JBreakStatment, otherwise it is dealt
with normally.  The modifications, tests, and results are as follows:

For statement changes:

// Codegen body
		        if (express instanceof JBlock){
		        	JBlock express2 = (JBlock) express;
		        	for (JStatement statement : express2.statements()) {
		        		if (statement instanceof JBreakStatement) {
		        			output.addBranchInstruction(GOTO, out);
		        		} else {
		        			statement.codegen(output);
		        		}
		            }
		        } else {
		        	if (express instanceof JBreakStatement) {
		        		output.addBranchInstruction(GOTO, out);
		        	} else {
		        		express.codegen(output);
		        	}

While Statement changes:

// Codegen body
        if (body instanceof JBlock){
        	JBlock body2 = (JBlock) body;
        	for (JStatement statement : body2.statements()) {
        		if (statement instanceof JBreakStatement) {
        			output.addBranchInstruction(GOTO, out);
        		} else {
        			statement.codegen(output);
        		}
            }
        } else {
        	if (body instanceof JBreakStatement) {
        		output.addBranchInstruction(GOTO, out);
        	} else {
        		body.codegen(output);
        	}
        }

Tests:

package pass;

import java.lang.System;

public class For {
 public static void main (String[] args){
  System.out.println("print");
  int i = 0;
  for (i = 6; i > 3; i--) {
   System.out.println(i);
  }
  
  for (int j = 6; 
    j > 3; 
    j--) {
   System.out.println(i);
  }
  
  for (int k = 0; 3 > k;){
  	System.out.println("one");
  	break;
  	System.out.println("two");
  	k = k + 1;
  }
  
    for(; i > 2;){
   System.out.println("just once");
   i--;
  }
    
    int k = 0;
    while (3 > k) {
    	System.out.println("one");
    	break;
    	System.out.println("two");
    	k = k + 1;
    }
    
    int m = 0;
    
    while (3 > m)
    	break;
    
    while (3 > m)
    	System.out.println(++m);
    
    for (int k = 0; 3 > k;)
    	break;
    
    for (int k = 0; 3 > k;)
    	System.out.println(++k);
    
  
//    for(;;){
//    }
//    
//    for(;;) //causes infinity
//        System.out.println("just once");
 }
}

Results:

BUILD SUCCESSFUL
Total time: 3 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\For.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.For
print
6
5
4
3
3
3
one
just once
one
1
2
3
1
2
3

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.For
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/For.class
  Last modified Nov 25, 2016; size 580 bytes
  MD5 checksum 8394a2cb9abd9cb01275be1ff94d92f9
public class pass.For
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/For
   #2 = Class              #1             // pass/For
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               print
  #19 = String             #18            // print
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (Ljava/lang/String;)V
  #24 = NameAndType        #22:#23        // println:(Ljava/lang/String;)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #26 = Utf8               (I)V
  #27 = NameAndType        #22:#26        // println:(I)V
  #28 = Methodref          #21.#27        // java/io/PrintStream.println:(I)V
  #29 = Utf8               one
  #30 = String             #29            // one
  #31 = Utf8               two
  #32 = String             #31            // two
  #33 = Utf8               just once
  #34 = String             #33            // just once
{
  public pass.For();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=5, args_size=1
         0: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #19                 // String print
         5: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: iconst_0
         9: istore_1
        10: bipush        6
        12: istore_1
        13: iload_1
        14: iconst_3
        15: if_icmple     31
        18: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        21: iload_1
        22: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
        25: iinc          1, -1
        28: goto          13
        31: bipush        6
        33: istore_2
        34: iload_2
        35: iconst_3
        36: if_icmple     52
        39: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        42: iload_1
        43: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
        46: iinc          2, -1
        49: goto          34
        52: iconst_0
        53: istore_2
        54: iconst_3
        55: iload_2
        56: if_icmple     85
        59: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        62: ldc           #30                 // String one
        64: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        67: goto          85
        70: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        73: ldc           #32                 // String two
        75: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        78: iload_2
        79: iconst_1
        80: iadd
        81: istore_2
        82: goto          54
        85: iload_1
        86: iconst_2
        87: if_icmple     104
        90: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        93: ldc           #34                 // String just once
        95: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        98: iinc          1, -1
       101: goto          85
       104: iconst_0
       105: istore_2
       106: iconst_3
       107: iload_2
       108: if_icmple     137
       111: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       114: ldc           #30                 // String one
       116: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       119: goto          137
       122: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       125: ldc           #32                 // String two
       127: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       130: iload_2
       131: iconst_1
       132: iadd
       133: istore_2
       134: goto          106
       137: iconst_0
       138: istore_3
       139: iconst_3
       140: iload_3
       141: if_icmple     150
       144: goto          150
       147: goto          139
       150: iconst_3
       151: iload_3
       152: if_icmple     168
       155: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       158: iinc          3, 1
       161: iload_3
       162: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
       165: goto          150
       168: iconst_0
       169: istore        4
       171: iconst_3
       172: iload         4
       174: if_icmple     183
       177: goto          183
       180: goto          171
       183: iconst_0
       184: istore        4
       186: iconst_3
       187: iload         4
       189: if_icmple     206
       192: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       195: iinc          4, 1
       198: iload         4
       200: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
       203: goto          186
       206: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\For.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\For.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>java.lang.System</Entry>
      <Entry>For</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>pass.For</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="For" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="i" offset="1"/>
                <Entry name="k" offset="2"/>
                <Entry name="m" offset="3"/>
              </Entries>
            </LocalContext>
            <JStatementExpression line="7">
              <JMessageExpression line="7" name="println">
                <Target>
                  <JFieldSelection line="7" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JLiteralString line="7" type="java.lang.String" value="&quot;print&quot;"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="8" name="i" type="int">
                  <Initializer>
                    <JLiteralInt line="8" type="int" value="0"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JForStatement line="9">
              <InitialValue>
                <JStatementExpression line="9">
                  <JBinaryExpression line="9" type="int" operator="=">
                    <Lhs>
                      <JVariable name="i"/>
                    </Lhs>
                    <Rhs>
                      <JLiteralInt line="9" type="int" value="6"/>
                    </Rhs>
                  </JBinaryExpression>
                </JStatementExpression>
              </InitialValue>
              <Test>
                <JBinaryExpression line="9" type="boolean" operator="&gt;">
                  <Lhs>
                    <JVariable name="i"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralInt line="9" type="int" value="3"/>
                  </Rhs>
                </JBinaryExpression>
              </Test>
              <Update>
                <JStatementExpression line="9">
                  <JUnaryExpression line="9" type="int" operator="post--">
                    <Operand>
                      <JVariable name="i"/>
                    </Operand>
                  </JUnaryExpression>
                </JStatementExpression>
              </Update>
            <Express>
              <JBlock line="9">
                <LocalContext>
                  <Entries>
                  </Entries>
                </LocalContext>
                <JStatementExpression line="10">
                  <JMessageExpression line="10" name="println">
                    <Target>
                      <JFieldSelection line="10" name="out"/>
                        <Target>
                          <JVariable name="System"/>
                        </Target>
                      </JFieldSelection>
                    </Target>
                    <Arguments>
                      <Argument>
                        <JVariable name="i"/>
                      </Argument>
                    </Arguments>
                  </JMessageExpression>
                </JStatementExpression>
              </JBlock>
            </express>
            </JForStatement>
            <JForStatement line="13">
              <InitialValue>
                <JVariableDeclarator line="13" name="j" type="int">
                  <Initializer>
                    <JLiteralInt line="13" type="int" value="6"/>
                  </Initializer>
                </JVariableDeclarator>
              </InitialValue>
              <Test>
                <JBinaryExpression line="14" type="boolean" operator="&gt;">
                  <Lhs>
                    <JVariable name="j"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralInt line="14" type="int" value="3"/>
                  </Rhs>
                </JBinaryExpression>
              </Test>
              <Update>
                <JStatementExpression line="15">
                  <JUnaryExpression line="15" type="int" operator="post--">
                    <Operand>
                      <JVariable name="j"/>
                    </Operand>
                  </JUnaryExpression>
                </JStatementExpression>
              </Update>
            <Express>
              <JBlock line="15">
                <LocalContext>
                  <Entries>
                  </Entries>
                </LocalContext>
                <JStatementExpression line="16">
                  <JMessageExpression line="16" name="println">
                    <Target>
                      <JFieldSelection line="16" name="out"/>
                        <Target>
                          <JVariable name="System"/>
                        </Target>
                      </JFieldSelection>
                    </Target>
                    <Arguments>
                      <Argument>
                        <JVariable name="i"/>
                      </Argument>
                    </Arguments>
                  </JMessageExpression>
                </JStatementExpression>
              </JBlock>
            </express>
            </JForStatement>
            <JForStatement line="19">
              <InitialValue>
                <JVariableDeclarator line="19" name="k" type="int">
                  <Initializer>
                    <JLiteralInt line="19" type="int" value="0"/>
                  </Initializer>
                </JVariableDeclarator>
              </InitialValue>
              <Test>
                <JBinaryExpression line="19" type="boolean" operator="&gt;">
                  <Lhs>
                    <JLiteralInt line="19" type="int" value="3"/>
                  </Lhs>
                  <Rhs>
                    <JVariable name="k"/>
                  </Rhs>
                </JBinaryExpression>
              </Test>
              <Update>
              </Update>
            <Express>
              <JBlock line="19">
                <LocalContext>
                  <Entries>
                  </Entries>
                </LocalContext>
                <JStatementExpression line="20">
                  <JMessageExpression line="20" name="println">
                    <Target>
                      <JFieldSelection line="20" name="out"/>
                        <Target>
                          <JVariable name="System"/>
                        </Target>
                      </JFieldSelection>
                    </Target>
                    <Arguments>
                      <Argument>
                        <JLiteralString line="20" type="java.lang.String" value="&quot;one&quot;"/>
                      </Argument>
                    </Arguments>
                  </JMessageExpression>
                </JStatementExpression>
                <JBreakStatement line="21"/>
                <JEmptyStatement line="21"/>
                <JStatementExpression line="22">
                  <JMessageExpression line="22" name="println">
                    <Target>
                      <JFieldSelection line="22" name="out"/>
                        <Target>
                          <JVariable name="System"/>
                        </Target>
                      </JFieldSelection>
                    </Target>
                    <Arguments>
                      <Argument>
                        <JLiteralString line="22" type="java.lang.String" value="&quot;two&quot;"/>
                      </Argument>
                    </Arguments>
                  </JMessageExpression>
                </JStatementExpression>
                <JStatementExpression line="23">
                  <JBinaryExpression line="23" type="int" operator="=">
                    <Lhs>
                      <JVariable name="k"/>
                    </Lhs>
                    <Rhs>
                      <JBinaryExpression line="23" type="int" operator="+">
                        <Lhs>
                          <JVariable name="k"/>
                        </Lhs>
                        <Rhs>
                          <JLiteralInt line="23" type="int" value="1"/>
                        </Rhs>
                      </JBinaryExpression>
                    </Rhs>
                  </JBinaryExpression>
                </JStatementExpression>
              </JBlock>
            </express>
            </JForStatement>
            <JForStatement line="26">
              <InitialValue>
              </InitialValue>
              <Test>
                <JBinaryExpression line="26" type="boolean" operator="&gt;">
                  <Lhs>
                    <JVariable name="i"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralInt line="26" type="int" value="2"/>
                  </Rhs>
                </JBinaryExpression>
              </Test>
              <Update>
              </Update>
            <Express>
              <JBlock line="26">
                <LocalContext>
                  <Entries>
                  </Entries>
                </LocalContext>
                <JStatementExpression line="27">
                  <JMessageExpression line="27" name="println">
                    <Target>
                      <JFieldSelection line="27" name="out"/>
                        <Target>
                          <JVariable name="System"/>
                        </Target>
                      </JFieldSelection>
                    </Target>
                    <Arguments>
                      <Argument>
                        <JLiteralString line="27" type="java.lang.String" value="&quot;just once&quot;"/>
                      </Argument>
                    </Arguments>
                  </JMessageExpression>
                </JStatementExpression>
                <JStatementExpression line="28">
                  <JUnaryExpression line="28" type="int" operator="post--">
                    <Operand>
                      <JVariable name="i"/>
                    </Operand>
                  </JUnaryExpression>
                </JStatementExpression>
              </JBlock>
            </express>
            </JForStatement>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="31" name="k" type="int">
                  <Initializer>
                    <JLiteralInt line="31" type="int" value="0"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JWhileStatement line="32">
              <TestExpression>
                <JBinaryExpression line="32" type="boolean" operator="&gt;">
                  <Lhs>
                    <JLiteralInt line="32" type="int" value="3"/>
                  </Lhs>
                  <Rhs>
                    <JVariable name="k"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <Body>
                <JBlock line="32">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="33">
                    <JMessageExpression line="33" name="println">
                      <Target>
                        <JFieldSelection line="33" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="33" type="java.lang.String" value="&quot;one&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                  <JBreakStatement line="34"/>
                  <JEmptyStatement line="34"/>
                  <JStatementExpression line="35">
                    <JMessageExpression line="35" name="println">
                      <Target>
                        <JFieldSelection line="35" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="35" type="java.lang.String" value="&quot;two&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                  <JStatementExpression line="36">
                    <JBinaryExpression line="36" type="int" operator="=">
                      <Lhs>
                        <JVariable name="k"/>
                      </Lhs>
                      <Rhs>
                        <JBinaryExpression line="36" type="int" operator="+">
                          <Lhs>
                            <JVariable name="k"/>
                          </Lhs>
                          <Rhs>
                            <JLiteralInt line="36" type="int" value="1"/>
                          </Rhs>
                        </JBinaryExpression>
                      </Rhs>
                    </JBinaryExpression>
                  </JStatementExpression>
                </JBlock>
              </Body>
            </JWhileStatement>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="39" name="m" type="int">
                  <Initializer>
                    <JLiteralInt line="39" type="int" value="0"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JWhileStatement line="41">
              <TestExpression>
                <JBinaryExpression line="41" type="boolean" operator="&gt;">
                  <Lhs>
                    <JLiteralInt line="41" type="int" value="3"/>
                  </Lhs>
                  <Rhs>
                    <JVariable name="m"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <Body>
                <JBreakStatement line="42"/>
              </Body>
            </JWhileStatement>
            <JEmptyStatement line="42"/>
            <JWhileStatement line="44">
              <TestExpression>
                <JBinaryExpression line="44" type="boolean" operator="&gt;">
                  <Lhs>
                    <JLiteralInt line="44" type="int" value="3"/>
                  </Lhs>
                  <Rhs>
                    <JVariable name="m"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <Body>
                <JStatementExpression line="45">
                  <JMessageExpression line="45" name="println">
                    <Target>
                      <JFieldSelection line="45" name="out"/>
                        <Target>
                          <JVariable name="System"/>
                        </Target>
                      </JFieldSelection>
                    </Target>
                    <Arguments>
                      <Argument>
                        <JUnaryExpression line="45" type="int" operator="++pre">
                          <Operand>
                            <JVariable name="m"/>
                          </Operand>
                        </JUnaryExpression>
                      </Argument>
                    </Arguments>
                  </JMessageExpression>
                </JStatementExpression>
              </Body>
            </JWhileStatement>
            <JForStatement line="47">
              <InitialValue>
                <JVariableDeclarator line="47" name="k" type="int">
                  <Initializer>
                    <JLiteralInt line="47" type="int" value="0"/>
                  </Initializer>
                </JVariableDeclarator>
              </InitialValue>
              <Test>
                <JBinaryExpression line="47" type="boolean" operator="&gt;">
                  <Lhs>
                    <JLiteralInt line="47" type="int" value="3"/>
                  </Lhs>
                  <Rhs>
                    <JVariable name="k"/>
                  </Rhs>
                </JBinaryExpression>
              </Test>
              <Update>
              </Update>
            <Express>
              <JBreakStatement line="48"/>
            </express>
            </JForStatement>
            <JEmptyStatement line="48"/>
            <JForStatement line="50">
              <InitialValue>
                <JVariableDeclarator line="50" name="k" type="int">
                  <Initializer>
                    <JLiteralInt line="50" type="int" value="0"/>
                  </Initializer>
                </JVariableDeclarator>
              </InitialValue>
              <Test>
                <JBinaryExpression line="50" type="boolean" operator="&gt;">
                  <Lhs>
                    <JLiteralInt line="50" type="int" value="3"/>
                  </Lhs>
                  <Rhs>
                    <JVariable name="k"/>
                  </Rhs>
                </JBinaryExpression>
              </Test>
              <Update>
              </Update>
            <Express>
              <JStatementExpression line="51">
                <JMessageExpression line="51" name="println">
                  <Target>
                    <JFieldSelection line="51" name="out"/>
                      <Target>
                        <JVariable name="System"/>
                      </Target>
                    </JFieldSelection>
                  </Target>
                  <Arguments>
                    <Argument>
                      <JUnaryExpression line="51" type="int" operator="++pre">
                        <Operand>
                          <JVariable name="k"/>
                        </Operand>
                      </JUnaryExpression>
                    </Argument>
                  </Arguments>
                </JMessageExpression>
              </JStatementExpression>
            </express>
            </JForStatement>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>


MODIFICATION OF QUESTION 3)

After a discussion in class, I realized that I may have made a mistake in how
my Or.java worked when dealing with onTrue booleans.  In order to verify this
concern, I first completed the do while loop as follows (note that this was not
actually part of the homework):

 public JDoWhileStatement analyze(Context context) {
        condition = condition.analyze(context);
        condition.type().mustMatchExpected(line(), Type.BOOLEAN);
        body = (JStatement) body.analyze(context);
        return this;
    }

    /**
     * Generate code for the while loop.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        String top = output.createLabel();

        // goes through at least once
        output.addLabel(top);

        // Codegen body
        body.codegen(output);

        //stay in the loop if condition is true
        condition.codegen(output, top, true);

        //otherwise it falls through
    }

package pass;

import java.lang.System;

public class DoWhile {
	public static void main(String[] args){
		int a = 9;
		
		do {
			a--;
		}while (a > 5);
		
		System.out.println(a);
	}
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.DoWhile
5

Once this was completed, I began testing using Or and noticed that there was a
problem when using (false || true), and so I made the appropriate modifcations,
along with some modification to the syntax of the else part to make more
readable:

    public void codegen(CLEmitter output, String targetLabel, boolean onTrue) {
        if (onTrue) {
        	//String falseLabel = output.createLabel();
            lhs.codegen(output, targetLabel, true);
            rhs.codegen(output, targetLabel, true);
            //output.addLabel(falseLabel);
        } else {
        	String trueLabel = output.createLabel();
            lhs.codegen(output, trueLabel, true);
            rhs.codegen(output, targetLabel, false);
            output.addLabel(trueLabel);
        }
    }

Here are the modified tests:

package pass;

import java.lang.System;

public class Or {
	public static void main (String[] args) {
		if (true || false) {
			System.out.println("You got it 1!");
		}
		if (false || true) {
			System.out.println("You got it 2!");
		}
		if (false || false) {
			System.out.println("You didn't get it!");
		} else {
			System.out.println("You got it 3!");
		}
		if (true || true){
			System.out.println("You got it 4!");
		}
		
		boolean a = true || false;
		System.out.println(a);
		
		int b = 7;
		
		do {
			System.out.println("inside 1st do");
			b--;
		} while (b > 5 || b > 5);
		
		do {
			System.out.println("inside 2nd do");
			b--;
		} while (b > 3 || b > 5);//true false
		
		do {
			System.out.println("inside 3rd do");
			b--;
		} while (b > 3 || b > 1);//false true
	}
}

And the results:

BUILD SUCCESSFUL
Total time: 3 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Or.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Or
You got it 1!
You got it 2!
You got it 3!
You got it 4!
true
inside 1st do
inside 1st do
inside 2nd do
inside 2nd do
inside 3rd do
inside 3rd do

C:\Users\bwils_000\Desktop\eclipse projects\j-->

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\Or.java 
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Or.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>Or</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>pass.Or</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Or" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="b" offset="2"/>
              </Entries>
            </LocalContext>
            <JIfStatement line="7">
              <TestExpression>
                <JBinaryExpression line="7" type="boolean" operator="||">
                  <Lhs>
                    <JLiteralTrue line="7" type="boolean"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralFalse line="7" type="boolean"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <ThenClause>
                <JBlock line="7">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="8">
                    <JMessageExpression line="8" name="println">
                      <Target>
                        <JFieldSelection line="8" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="8" type="java.lang.String" value="&quot;You got it 1!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ThenClause>
            </JIfStatement>
            <JIfStatement line="10">
              <TestExpression>
                <JBinaryExpression line="10" type="boolean" operator="||">
                  <Lhs>
                    <JLiteralFalse line="10" type="boolean"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralTrue line="10" type="boolean"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <ThenClause>
                <JBlock line="10">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="11">
                    <JMessageExpression line="11" name="println">
                      <Target>
                        <JFieldSelection line="11" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="11" type="java.lang.String" value="&quot;You got it 2!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ThenClause>
            </JIfStatement>
            <JIfStatement line="13">
              <TestExpression>
                <JBinaryExpression line="13" type="boolean" operator="||">
                  <Lhs>
                    <JLiteralFalse line="13" type="boolean"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralFalse line="13" type="boolean"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <ThenClause>
                <JBlock line="13">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="14">
                    <JMessageExpression line="14" name="println">
                      <Target>
                        <JFieldSelection line="14" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="14" type="java.lang.String" value="&quot;You didn&#39;t get it!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ThenClause>
              <ElseClause>
                <JBlock line="15">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="16">
                    <JMessageExpression line="16" name="println">
                      <Target>
                        <JFieldSelection line="16" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="16" type="java.lang.String" value="&quot;You got it 3!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ElseClause>
            </JIfStatement>
            <JIfStatement line="18">
              <TestExpression>
                <JBinaryExpression line="18" type="boolean" operator="||">
                  <Lhs>
                    <JLiteralTrue line="18" type="boolean"/>
                  </Lhs>
                  <Rhs>
                    <JLiteralTrue line="18" type="boolean"/>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <ThenClause>
                <JBlock line="18">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="19">
                    <JMessageExpression line="19" name="println">
                      <Target>
                        <JFieldSelection line="19" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="19" type="java.lang.String" value="&quot;You got it 4!&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                </JBlock>
              </ThenClause>
            </JIfStatement>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="22" name="a" type="boolean">
                  <Initializer>
                    <JBinaryExpression line="22" type="boolean" operator="||">
                      <Lhs>
                        <JLiteralTrue line="22" type="boolean"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralFalse line="22" type="boolean"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="23">
              <JMessageExpression line="23" name="println">
                <Target>
                  <JFieldSelection line="23" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="25" name="b" type="int">
                  <Initializer>
                    <JLiteralInt line="25" type="int" value="7"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JDoWhileStatement line="27">
              <TestExpression>
                <JBinaryExpression line="30" type="boolean" operator="||">
                  <Lhs>
                    <JBinaryExpression line="30" type="boolean" operator="&gt;">
                      <Lhs>
                        <JVariable name="b"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralInt line="30" type="int" value="5"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Lhs>
                  <Rhs>
                    <JBinaryExpression line="30" type="boolean" operator="&gt;">
                      <Lhs>
                        <JVariable name="b"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralInt line="30" type="int" value="5"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <Body>
                <JBlock line="27">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="28">
                    <JMessageExpression line="28" name="println">
                      <Target>
                        <JFieldSelection line="28" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="28" type="java.lang.String" value="&quot;inside 1st do&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                  <JStatementExpression line="29">
                    <JUnaryExpression line="29" type="int" operator="post--">
                      <Operand>
                        <JVariable name="b"/>
                      </Operand>
                    </JUnaryExpression>
                  </JStatementExpression>
                </JBlock>
              </Body>
            </JDoWhileStatement>
            <JEmptyStatement line="30"/>
            <JDoWhileStatement line="32">
              <TestExpression>
                <JBinaryExpression line="35" type="boolean" operator="||">
                  <Lhs>
                    <JBinaryExpression line="35" type="boolean" operator="&gt;">
                      <Lhs>
                        <JVariable name="b"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralInt line="35" type="int" value="3"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Lhs>
                  <Rhs>
                    <JBinaryExpression line="35" type="boolean" operator="&gt;">
                      <Lhs>
                        <JVariable name="b"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralInt line="35" type="int" value="5"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <Body>
                <JBlock line="32">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="33">
                    <JMessageExpression line="33" name="println">
                      <Target>
                        <JFieldSelection line="33" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="33" type="java.lang.String" value="&quot;inside 2nd do&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                  <JStatementExpression line="34">
                    <JUnaryExpression line="34" type="int" operator="post--">
                      <Operand>
                        <JVariable name="b"/>
                      </Operand>
                    </JUnaryExpression>
                  </JStatementExpression>
                </JBlock>
              </Body>
            </JDoWhileStatement>
            <JEmptyStatement line="35"/>
            <JDoWhileStatement line="37">
              <TestExpression>
                <JBinaryExpression line="40" type="boolean" operator="||">
                  <Lhs>
                    <JBinaryExpression line="40" type="boolean" operator="&gt;">
                      <Lhs>
                        <JVariable name="b"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralInt line="40" type="int" value="3"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Lhs>
                  <Rhs>
                    <JBinaryExpression line="40" type="boolean" operator="&gt;">
                      <Lhs>
                        <JVariable name="b"/>
                      </Lhs>
                      <Rhs>
                        <JLiteralInt line="40" type="int" value="1"/>
                      </Rhs>
                    </JBinaryExpression>
                  </Rhs>
                </JBinaryExpression>
              </TestExpression>
              <Body>
                <JBlock line="37">
                  <LocalContext>
                    <Entries>
                    </Entries>
                  </LocalContext>
                  <JStatementExpression line="38">
                    <JMessageExpression line="38" name="println">
                      <Target>
                        <JFieldSelection line="38" name="out"/>
                          <Target>
                            <JVariable name="System"/>
                          </Target>
                        </JFieldSelection>
                      </Target>
                      <Arguments>
                        <Argument>
                          <JLiteralString line="38" type="java.lang.String" value="&quot;inside 3rd do&quot;"/>
                        </Argument>
                      </Arguments>
                    </JMessageExpression>
                  </JStatementExpression>
                  <JStatementExpression line="39">
                    <JUnaryExpression line="39" type="int" operator="post--">
                      <Operand>
                        <JVariable name="b"/>
                      </Operand>
                    </JUnaryExpression>
                  </JStatementExpression>
                </JBlock>
              </Body>
            </JDoWhileStatement>
            <JEmptyStatement line="40"/>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Or.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Or
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Or.class
  Last modified Dec 2, 2016; size 626 bytes
  MD5 checksum 437c640342d1903874894db65e4a2d99
public class pass.Or
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Or
   #2 = Class              #1             // pass/Or
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               You got it 1!
  #19 = String             #18            // You got it 1!
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (Ljava/lang/String;)V
  #24 = NameAndType        #22:#23        // println:(Ljava/lang/String;)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #26 = Utf8               You got it 2!
  #27 = String             #26            // You got it 2!
  #28 = Utf8               You didn't get it!
  #29 = String             #28            // You didn't get it!
  #30 = Utf8               You got it 3!
  #31 = String             #30            // You got it 3!
  #32 = Utf8               You got it 4!
  #33 = String             #32            // You got it 4!
  #34 = Utf8               (Z)V
  #35 = NameAndType        #22:#34        // println:(Z)V
  #36 = Methodref          #21.#35        // java/io/PrintStream.println:(Z)V
  #37 = Utf8               inside 1st do
  #38 = String             #37            // inside 1st do
  #39 = Utf8               inside 2nd do
  #40 = String             #39            // inside 2nd do
  #41 = Utf8               inside 3rd do
  #42 = String             #41            // inside 3rd do
{
  public pass.Or();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=3, args_size=1
         0: goto          6
         3: goto          14
         6: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
         9: ldc           #19                 // String You got it 1!
        11: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        14: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        17: ldc           #27                 // String You got it 2!
        19: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        22: goto          36
        25: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        28: ldc           #29                 // String You didn't get it!
        30: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        33: goto          44
        36: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        39: ldc           #31                 // String You got it 3!
        41: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        44: goto          47
        47: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        50: ldc           #33                 // String You got it 4!
        52: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        55: goto          61
        58: goto          65
        61: iconst_1
        62: goto          66
        65: iconst_0
        66: istore_1
        67: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        70: iload_1
        71: invokevirtual #36                 // Method java/io/PrintStream.println:(Z)V
        74: bipush        7
        76: istore_2
        77: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        80: ldc           #38                 // String inside 1st do
        82: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        85: iinc          2, -1
        88: iload_2
        89: iconst_5
        90: if_icmpgt     77
        93: iload_2
        94: iconst_5
        95: if_icmpgt     77
        98: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       101: ldc           #40                 // String inside 2nd do
       103: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       106: iinc          2, -1
       109: iload_2
       110: iconst_3
       111: if_icmpgt     98
       114: iload_2
       115: iconst_5
       116: if_icmpgt     98
       119: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
       122: ldc           #42                 // String inside 3rd do
       124: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       127: iinc          2, -1
       130: iload_2
       131: iconst_3
       132: if_icmpgt     119
       135: iload_2
       136: iconst_1
       137: if_icmpgt     119
       140: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

QUESTION 1 CORRECTION)

When I began studying for the second exam, I noticed that I made a mistake with
binary operations.  They did not throw an error when mismatched types were
given so I made the following corrections, and performed the following tests
that achieved the following results (note that plus already detected errors):

for '-'

    public JExpression analyze(Context context) {
        lhs = (JExpression) lhs.analyze(context);
        rhs = (JExpression) rhs.analyze(context);
        if (lhs.type() == Type.INT && rhs.type() == Type.INT) {
            type = Type.INT;
        } else if (lhs.type() == Type.LONG && rhs.type() == Type.LONG) {
            type = Type.LONG;
        } else {
            type = Type.ANY;
            JAST.compilationUnit.reportSemanticError(line(),
                    "Invalid operand types for -");
        }
//        lhs.type().mustMatchExpected(line(), Type.INT);
//        rhs.type().mustMatchExpected(line(), Type.INT);
//        type = Type.INT;
        return this;
    }

for '*'

    public JExpression analyze(Context context) {
        lhs = (JExpression) lhs.analyze(context);
        rhs = (JExpression) rhs.analyze(context);
        if (lhs.type() == Type.INT && rhs.type() == Type.INT) {
//        	lhs.type().mustMatchExpected(line(), Type.INT);
//            rhs.type().mustMatchExpected(line(), Type.INT);
            type = Type.INT;
        } else if (lhs.type() == Type.LONG && rhs.type() == Type.LONG) {
//        	lhs.type().mustMatchExpected(line(), Type.LONG);
//            rhs.type().mustMatchExpected(line(), Type.LONG);
            type = Type.LONG;
        } else {
            type = Type.ANY;
            JAST.compilationUnit.reportSemanticError(line(),
                    "Invalid operand types for *");
        }
        //type = Type.INT;
        return this;
    }

package fail;

public class LongErrors {
	public static void main(String[] args) {
		int a = 1L + 1;
		int b = 1 + 1L;
		int c = 1L - 1;
		long d = 1 - 1L;
		long e = 1l * 1;
		int f = 1 * 1l;
	}
}

BUILD SUCCESSFUL
Total time: 3 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\fail\LongErrors.java
tests\fail\LongErrors.java:5: Invalid operand types for +
tests\fail\LongErrors.java:6: Invalid operand types for +
tests\fail\LongErrors.java:7: Invalid operand types for -
tests\fail\LongErrors.java:8: Invalid operand types for -
tests\fail\LongErrors.java:9: Invalid operand types for *
tests\fail\LongErrors.java:10: Invalid operand types for *

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\fail\LongErrors.java
tests\fail\LongErrors.java:5: Invalid operand types for +
tests\fail\LongErrors.java:6: Invalid operand types for +
tests\fail\LongErrors.java:7: Invalid operand types for -
tests\fail\LongErrors.java:8: Invalid operand types for -
tests\fail\LongErrors.java:9: Invalid operand types for *
tests\fail\LongErrors.java:10: Invalid operand types for *
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\fail\LongErrors.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>LongErrors</Entry>
      <Entry>fail.LongErrors</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="fail"/>
  <Imports>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="3" name="LongErrors" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="4" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="4" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="4">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="b" offset="2"/>
                <Entry name="c" offset="3"/>
                <Entry name="d" offset="4"/>
                <Entry name="e" offset="6"/>
                <Entry name="f" offset="8"/>
              </Entries>
            </LocalContext>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="5" name="a" type="int">
                  <Initializer>
Exception in thread "main" java.lang.NullPointerException
        at jminusminus.Type.toJava(Type.java:463)
        at jminusminus.Type.toString(Type.java:405)
        at jminusminus.JBinaryExpression.writeToStdOut(JBinaryExpression.java:52)
        at jminusminus.JVariableDeclarator.writeToStdOut(JVariableDeclarator.java:136)
        at jminusminus.JVariableDeclaration.writeToStdOut(JVariableDeclaration.java:137)
        at jminusminus.JBlock.writeToStdOut(JBlock.java:94)
        at jminusminus.JMethodDeclaration.writeToStdOut(JMethodDeclaration.java:263)
        at jminusminus.JClassDeclaration.writeToStdOut(JClassDeclaration.java:297)
        at jminusminus.JCompilationUnit.writeToStdOut(JCompilationUnit.java:245)
        at jminusminus.Main.main(Main.java:136)

C:\Users\bwils_000\Desktop\eclipse projects\j-->

ADDITIONS TO QUESTION 1)

Some additional modifications had to be made to question 1.  In order to get
pre-increment and post-decrement and += working.  And perform these acts with
an array.  The following corrections had to be made:

   public void codegenLoadLhsRvalue(CLEmitter output) {
        // Load rvalue onto stack, by duplicating the lvalue,
        // and fetching it's content
        if (type == Type.STRING) {
            output.addNoArgInstruction(DUP2_X1);
        } else {
            output.addNoArgInstruction(DUP2);
        }
	if (type == Type.INT) {
	    output.addNoArgInstruction(IALOAD);
	} else if (type == Type.LONG) {//added
	    output.addNoArgInstruction(LALOAD);
	} else if (type == Type.BOOLEAN) {
	    output.addNoArgInstruction(BALOAD);
	} else if (type == Type.CHAR) {
	    output.addNoArgInstruction(CALOAD);
        } else if (!type.isPrimitive()) {
            output.addNoArgInstruction(AALOAD);
        }
    }

class JPreIncrementOp extends JUnaryExpression {

    /**
     * Construct an AST node for a ++expr given its line number, and the
     * operand.
     * 
     * @param line
     *            line in which the expression occurs in the source file.
     * @param arg
     *            the operand.
     */

    public JPreIncrementOp(int line, JExpression arg) {
        super(line, "++pre", arg);
    }

    /**
     * Analyze the operand as a lhs (since there is a side effect), check types
     * and determine the type of the result.
     * 
     * @param context
     *            context in which names are resolved.
     * @return the analyzed (and possibly rewritten) AST subtree.
     */

    public JExpression analyze(Context context) {
        if (!(arg instanceof JLhs)) {
            JAST.compilationUnit.reportSemanticError(line,
                    "Operand to ++expr must have an LValue.");
            type = Type.ANY;
        } else {
            arg = (JExpression) arg.analyze(context);
            if (arg.type() == Type.INT){
	            arg.type().mustMatchExpected(line(), Type.INT);
	            type = Type.INT;
            } else {//added
            	arg.type().mustMatchExpected(line(), Type.LONG);
	            type = Type.LONG;
            }
        }
        return this;
    }

    /**
     * In generating code for a pre-increment operation, we treat simple
     * variable (JVariable) operands specially since the JVM has an increment
     * instruction. Otherwise, we rely on the JLhs code generation support for
     * generating the proper code. Notice that we distinguish between
     * expressions that are statement expressions and those that are not; we
     * insure the proper value (after the increment) is left atop the stack in
     * the latter case.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        if (arg instanceof JVariable) {
            // A local variable; otherwise analyze() would
            // have replaced it with an explicit field selection.
            int offset = ((LocalVariableDefn) ((JVariable) arg).iDefn())
                    .offset();
            output.addIINCInstruction(offset, 1);
            if (!isStatementExpression) {
                // Loading its original rvalue
                arg.codegen(output);
            }
        } else if (arg.type() == Type.INT){
            ((JLhs) arg).codegenLoadLhsLvalue(output);
            ((JLhs) arg).codegenLoadLhsRvalue(output);
            output.addNoArgInstruction(ICONST_1);
            output.addNoArgInstruction(IADD);
            if (!isStatementExpression) {
                // Loading its original rvalue
                ((JLhs) arg).codegenDuplicateRvalue(output);
            }
            ((JLhs) arg).codegenStore(output);
        } else { //added
            ((JLhs) arg).codegenLoadLhsLvalue(output);
            ((JLhs) arg).codegenLoadLhsRvalue(output);
            output.addNoArgInstruction(LCONST_1);
            output.addNoArgInstruction(LADD);
            if (!isStatementExpression) {
                // Loading its original rvalue
                ((JLhs) arg).codegenDuplicateRvalue(output);
            }
            ((JLhs) arg).codegenStore(output);
        }
    }

}

class JPostDecrementOp extends JUnaryExpression {

    /**
     * Construct an AST node for an expr-- expression given its line number, and
     * the operand.
     * 
     * @param line
     *            line in which the expression occurs in the source file.
     * @param arg
     *            the operand.
     */

    public JPostDecrementOp(int line, JExpression arg) {
        super(line, "post--", arg);
    }

    /**
     * Analyze the operand as a lhs (since there is a side effect), check types
     * and determine the type of the result.
     * 
     * @param context
     *            context in which names are resolved.
     * @return the analyzed (and possibly rewritten) AST subtree.
     */

    public JExpression analyze(Context context) {
        if (!(arg instanceof JLhs)) {
            JAST.compilationUnit.reportSemanticError(line,
                    "Operand to expr-- must have an LValue.");
            type = Type.ANY;
        } else {
            arg = (JExpression) arg.analyze(context);
            if (arg.type() == Type.INT){
	            arg.type().mustMatchExpected(line(), Type.INT);
	            type = Type.INT;
            } else {//added
            	arg.type().mustMatchExpected(line(), Type.LONG);
	            type = Type.LONG;
            }
        }
        return this;
    }

    /**
     * In generating code for a post-decrement operation, we treat simple
     * variable (JVariable) operands specially since the JVM has an increment
     * instruction. Otherwise, we rely on the JLhs code generation support for
     * generating the proper code. Notice that we distinguish between
     * expressions that are statement expressions and those that are not; we
     * insure the proper value (before the decrement) is left atop the stack in
     * the latter case.
     * 
     * @param output
     *            the code emitter (basically an abstraction for producing the
     *            .class file).
     */

    public void codegen(CLEmitter output) {
        if (arg instanceof JVariable) {
            // A local variable; otherwise analyze() would
            // have replaced it with an explicit field selection.
            int offset = ((LocalVariableDefn) ((JVariable) arg).iDefn())
                    .offset();
            if (!isStatementExpression) {
                // Loading its original rvalue
                arg.codegen(output);
            }
            output.addIINCInstruction(offset, -1);
        } else if (arg.type() == Type.INT) {
            ((JLhs) arg).codegenLoadLhsLvalue(output);
            ((JLhs) arg).codegenLoadLhsRvalue(output);
            if (!isStatementExpression) {
                // Loading its original rvalue
                ((JLhs) arg).codegenDuplicateRvalue(output);
            }
            output.addNoArgInstruction(ICONST_1);
            output.addNoArgInstruction(ISUB);
            ((JLhs) arg).codegenStore(output);
        } else { //added
            ((JLhs) arg).codegenLoadLhsLvalue(output);
            ((JLhs) arg).codegenLoadLhsRvalue(output);
            if (!isStatementExpression) {
                // Loading its original rvalue
                ((JLhs) arg).codegenDuplicateRvalue(output);
            }
            output.addNoArgInstruction(LCONST_1);
            output.addNoArgInstruction(LSUB);
            ((JLhs) arg).codegenStore(output);
        }
    }

}

The tests and results are as follows:

package pass;

import java.lang.System;

public class Long2 {
	public static void main(String[] args){
		long[] e = {63L};//must use this format
        //e[0] = 63L;
        System.out.println(e[0]);
        long[] e2 = new long[3];
        e2[0] = 63l;//lower case l
        System.out.println(e2[0]);
        ++e[0];
        e[0] += 1L;
        System.out.println(e[0]);
        e[0]--;
        System.out.println(e[0]);
        Long2 l = new Long2();
        ++l.tester2;
        ++l.tester;
        System.out.println(l.tester);
        l.tester--;
        System.out.println(l.tester);
        l.tester += 2L;
        System.out.println(l.tester);
        
        Long3 l2 = new Long3();
        ++l2.test3;
        l2.test3--;
        l2.test3 += 2L;
        System.out.println(l2.test3);
    	 
	}
	long tester = 3L;
	int tester2 = 3;
	public int get2() {
		 return tester2;
	 }
	 
	 public long get() {
	     return tester;
	 }
	
}

class Long3 {
	long test3 = 5L;
	
	public long getLong(){
		return this.test3;
	}
}

BUILD SUCCESSFUL
Total time: 5 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Long2.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Long2
63
63
65
64
4
3
5
7

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Long2
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Long2.class
  Last modified Dec 5, 2016; size 743 bytes
  MD5 checksum 652bceecaa564135b18d0895e2bc8eab
public class pass.Long2
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Long2
   #2 = Class              #1             // pass/Long2
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Long               3l
  #11 = Utf8               tester
  #12 = Utf8               J
  #13 = NameAndType        #11:#12        // tester:J
  #14 = Fieldref           #2.#13         // pass/Long2.tester:J
  #15 = Utf8               tester2
  #16 = Utf8               I
  #17 = NameAndType        #15:#16        // tester2:I
  #18 = Fieldref           #2.#17         // pass/Long2.tester2:I
  #19 = Utf8               Code
  #20 = Utf8               main
  #21 = Utf8               ([Ljava/lang/String;)V
  #22 = Long               63l
  #24 = Utf8               java/lang/System
  #25 = Class              #24            // java/lang/System
  #26 = Utf8               out
  #27 = Utf8               Ljava/io/PrintStream;
  #28 = NameAndType        #26:#27        // out:Ljava/io/PrintStream;
  #29 = Fieldref           #25.#28        // java/lang/System.out:Ljava/io/PrintStream;
  #30 = Utf8               java/io/PrintStream
  #31 = Class              #30            // java/io/PrintStream
  #32 = Utf8               println
  #33 = Utf8               (J)V
  #34 = NameAndType        #32:#33        // println:(J)V
  #35 = Methodref          #31.#34        // java/io/PrintStream.println:(J)V
  #36 = Methodref          #2.#7          // pass/Long2."<init>":()V
  #37 = Long               2l
  #39 = Utf8               pass/Long3
  #40 = Class              #39            // pass/Long3
  #41 = Methodref          #40.#7         // pass/Long3."<init>":()V
  #42 = Utf8               test3
  #43 = NameAndType        #42:#12        // test3:J
  #44 = Fieldref           #40.#43        // pass/Long3.test3:J
  #45 = Utf8               get2
  #46 = Utf8               ()I
  #47 = Utf8               get
  #48 = Utf8               ()J
{
  long tester;
    descriptor: J
    flags:

  int tester2;
    descriptor: I
    flags:

  public pass.Long2();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=6, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: ldc2_w        #9                  // long 3l
         8: putfield      #14                 // Field tester:J
        11: aload_0
        12: iconst_3
        13: putfield      #18                 // Field tester2:I
        16: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=29, locals=5, args_size=1
         0: iconst_1
         1: newarray       long
         3: dup
         4: iconst_0
         5: ldc2_w        #22                 // long 63l
         8: lastore
         9: astore_1
        10: getstatic     #29                 // Field java/lang/System.out:Ljava/io/PrintStream;
        13: aload_1
        14: iconst_0
        15: laload
        16: invokevirtual #35                 // Method java/io/PrintStream.println:(J)V
        19: iconst_3
        20: newarray       long
        22: astore_2
        23: aload_2
        24: iconst_0
        25: ldc2_w        #22                 // long 63l
        28: lastore
        29: getstatic     #29                 // Field java/lang/System.out:Ljava/io/PrintStream;
        32: aload_2
        33: iconst_0
        34: laload
        35: invokevirtual #35                 // Method java/io/PrintStream.println:(J)V
        38: aload_1
        39: iconst_0
        40: dup2
        41: laload
        42: lconst_1
        43: ladd
        44: lastore
        45: aload_1
        46: iconst_0
        47: dup2
        48: laload
        49: lconst_1
        50: ladd
        51: lastore
        52: getstatic     #29                 // Field java/lang/System.out:Ljava/io/PrintStream;
        55: aload_1
        56: iconst_0
        57: laload
        58: invokevirtual #35                 // Method java/io/PrintStream.println:(J)V
        61: aload_1
        62: iconst_0
        63: dup2
        64: laload
        65: lconst_1
        66: lsub
        67: lastore
        68: getstatic     #29                 // Field java/lang/System.out:Ljava/io/PrintStream;
        71: aload_1
        72: iconst_0
        73: laload
        74: invokevirtual #35                 // Method java/io/PrintStream.println:(J)V
        77: new           #2                  // class pass/Long2
        80: dup
        81: invokespecial #36                 // Method "<init>":()V
        84: astore_3
        85: aload_3
        86: dup
        87: getfield      #18                 // Field tester2:I
        90: iconst_1
        91: iadd
        92: putfield      #18                 // Field tester2:I
        95: aload_3
        96: dup
        97: getfield      #14                 // Field tester:J
       100: lconst_1
       101: ladd
       102: putfield      #14                 // Field tester:J
       105: getstatic     #29                 // Field java/lang/System.out:Ljava/io/PrintStream;
       108: aload_3
       109: getfield      #14                 // Field tester:J
       112: invokevirtual #35                 // Method java/io/PrintStream.println:(J)V
       115: aload_3
       116: dup
       117: getfield      #14                 // Field tester:J
       120: lconst_1
       121: lsub
       122: putfield      #14                 // Field tester:J
       125: getstatic     #29                 // Field java/lang/System.out:Ljava/io/PrintStream;
       128: aload_3
       129: getfield      #14                 // Field tester:J
       132: invokevirtual #35                 // Method java/io/PrintStream.println:(J)V
       135: aload_3
       136: dup
       137: getfield      #14                 // Field tester:J
       140: ldc2_w        #37                 // long 2l
       143: ladd
       144: putfield      #14                 // Field tester:J
       147: getstatic     #29                 // Field java/lang/System.out:Ljava/io/PrintStream;
       150: aload_3
       151: getfield      #14                 // Field tester:J
       154: invokevirtual #35                 // Method java/io/PrintStream.println:(J)V
       157: new           #40                 // class pass/Long3
       160: dup
       161: invokespecial #41                 // Method pass/Long3."<init>":()V
       164: astore        4
       166: aload         4
       168: dup
       169: getfield      #44                 // Field pass/Long3.test3:J
       172: lconst_1
       173: ladd
       174: putfield      #44                 // Field pass/Long3.test3:J
       177: aload         4
       179: dup
       180: getfield      #44                 // Field pass/Long3.test3:J
       183: lconst_1
       184: lsub
       185: putfield      #44                 // Field pass/Long3.test3:J
       188: aload         4
       190: dup
       191: getfield      #44                 // Field pass/Long3.test3:J
       194: ldc2_w        #37                 // long 2l
       197: ladd
       198: putfield      #44                 // Field pass/Long3.test3:J
       201: getstatic     #29                 // Field java/lang/System.out:Ljava/io/PrintStream;
       204: aload         4
       206: getfield      #44                 // Field pass/Long3.test3:J
       209: invokevirtual #35                 // Method java/io/PrintStream.println:(J)V
       212: return

  public int get2();
    descriptor: ()I
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #18                 // Field tester2:I
         4: ireturn

  public long get();
    descriptor: ()J
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #14                 // Field tester:J
         4: lreturn
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Long2.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>Long3</Entry>
      <Entry>Long2</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>pass.Long2</Entry>
      <Entry>System</Entry>
      <Entry>pass.Long3</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Long2" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="e" offset="1"/>
                <Entry name="l2" offset="4"/>
                <Entry name="l" offset="3"/>
                <Entry name="e2" offset="2"/>
              </Entries>
            </LocalContext>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="7" name="e" type="long[]">
                  <Initializer>
                    <JArrayInitializer>
                      <JLiteralLong line="7" type="long" value="63L"/>
                    </JArrayInitializer>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="9">
              <JMessageExpression line="9" name="println">
                <Target>
                  <JFieldSelection line="9" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JArrayExpression>
                      <TheArray>
                        <JVariable name="e"/>
                      </TheArray>
                      <IndexExpression>
                        <JLiteralInt line="9" type="int" value="0"/>
                      </IndexExpression>
                    </JArrayExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="10" name="e2" type="long[]">
                  <Initializer>
                    <JNewArrayOp line="10" type="long[]"/>
                      <Dimensions>
                        <Dimension>
                          <JLiteralInt line="10" type="int" value="3"/>
                        </Dimension>
                      </Dimensions>
                    </JNewArrayOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="11">
              <JBinaryExpression line="11" type="long" operator="=">
                <Lhs>
                  <JArrayExpression>
                    <TheArray>
                      <JVariable name="e2"/>
                    </TheArray>
                    <IndexExpression>
                      <JLiteralInt line="11" type="int" value="0"/>
                    </IndexExpression>
                  </JArrayExpression>
                </Lhs>
                <Rhs>
                  <JLiteralLong line="11" type="long" value="63l"/>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="12">
              <JMessageExpression line="12" name="println">
                <Target>
                  <JFieldSelection line="12" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JArrayExpression>
                      <TheArray>
                        <JVariable name="e2"/>
                      </TheArray>
                      <IndexExpression>
                        <JLiteralInt line="12" type="int" value="0"/>
                      </IndexExpression>
                    </JArrayExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="13">
              <JUnaryExpression line="13" type="long" operator="++pre">
                <Operand>
                  <JArrayExpression>
                    <TheArray>
                      <JVariable name="e"/>
                    </TheArray>
                    <IndexExpression>
                      <JLiteralInt line="13" type="int" value="0"/>
                    </IndexExpression>
                  </JArrayExpression>
                </Operand>
              </JUnaryExpression>
            </JStatementExpression>
            <JStatementExpression line="14">
              <JBinaryExpression line="14" type="long" operator="+=">
                <Lhs>
                  <JArrayExpression>
                    <TheArray>
                      <JVariable name="e"/>
                    </TheArray>
                    <IndexExpression>
                      <JLiteralInt line="14" type="int" value="0"/>
                    </IndexExpression>
                  </JArrayExpression>
                </Lhs>
                <Rhs>
                  <JLiteralLong line="14" type="long" value="1L"/>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="15">
              <JMessageExpression line="15" name="println">
                <Target>
                  <JFieldSelection line="15" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JArrayExpression>
                      <TheArray>
                        <JVariable name="e"/>
                      </TheArray>
                      <IndexExpression>
                        <JLiteralInt line="15" type="int" value="0"/>
                      </IndexExpression>
                    </JArrayExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="16">
              <JUnaryExpression line="16" type="long" operator="post--">
                <Operand>
                  <JArrayExpression>
                    <TheArray>
                      <JVariable name="e"/>
                    </TheArray>
                    <IndexExpression>
                      <JLiteralInt line="16" type="int" value="0"/>
                    </IndexExpression>
                  </JArrayExpression>
                </Operand>
              </JUnaryExpression>
            </JStatementExpression>
            <JStatementExpression line="17">
              <JMessageExpression line="17" name="println">
                <Target>
                  <JFieldSelection line="17" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JArrayExpression>
                      <TheArray>
                        <JVariable name="e"/>
                      </TheArray>
                      <IndexExpression>
                        <JLiteralInt line="17" type="int" value="0"/>
                      </IndexExpression>
                    </JArrayExpression>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="18" name="l" type="Long2">
                  <Initializer>
                    <JNewOp line="18" type="pass.Long2"/>
                      <Arguments>
                      </Arguments>
                    </JNewOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="19">
              <JUnaryExpression line="19" type="int" operator="++pre">
                <Operand>
                  <JFieldSelection line="19" name="tester2"/>
                    <Target>
                      <JVariable name="l"/>
                    </Target>
                  </JFieldSelection>
                </Operand>
              </JUnaryExpression>
            </JStatementExpression>
            <JStatementExpression line="20">
              <JUnaryExpression line="20" type="long" operator="++pre">
                <Operand>
                  <JFieldSelection line="20" name="tester"/>
                    <Target>
                      <JVariable name="l"/>
                    </Target>
                  </JFieldSelection>
                </Operand>
              </JUnaryExpression>
            </JStatementExpression>
            <JStatementExpression line="21">
              <JMessageExpression line="21" name="println">
                <Target>
                  <JFieldSelection line="21" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JFieldSelection line="21" name="tester"/>
                      <Target>
                        <JVariable name="l"/>
                      </Target>
                    </JFieldSelection>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="22">
              <JUnaryExpression line="22" type="long" operator="post--">
                <Operand>
                  <JFieldSelection line="22" name="tester"/>
                    <Target>
                      <JVariable name="l"/>
                    </Target>
                  </JFieldSelection>
                </Operand>
              </JUnaryExpression>
            </JStatementExpression>
            <JStatementExpression line="23">
              <JMessageExpression line="23" name="println">
                <Target>
                  <JFieldSelection line="23" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JFieldSelection line="23" name="tester"/>
                      <Target>
                        <JVariable name="l"/>
                      </Target>
                    </JFieldSelection>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="24">
              <JBinaryExpression line="24" type="long" operator="+=">
                <Lhs>
                  <JFieldSelection line="24" name="tester"/>
                    <Target>
                      <JVariable name="l"/>
                    </Target>
                  </JFieldSelection>
                </Lhs>
                <Rhs>
                  <JLiteralLong line="24" type="long" value="2L"/>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="25">
              <JMessageExpression line="25" name="println">
                <Target>
                  <JFieldSelection line="25" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JFieldSelection line="25" name="tester"/>
                      <Target>
                        <JVariable name="l"/>
                      </Target>
                    </JFieldSelection>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="27" name="l2" type="Long3">
                  <Initializer>
                    <JNewOp line="27" type="pass.Long3"/>
                      <Arguments>
                      </Arguments>
                    </JNewOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="28">
              <JUnaryExpression line="28" type="long" operator="++pre">
                <Operand>
                  <JFieldSelection line="28" name="test3"/>
                    <Target>
                      <JVariable name="l2"/>
                    </Target>
                  </JFieldSelection>
                </Operand>
              </JUnaryExpression>
            </JStatementExpression>
            <JStatementExpression line="29">
              <JUnaryExpression line="29" type="long" operator="post--">
                <Operand>
                  <JFieldSelection line="29" name="test3"/>
                    <Target>
                      <JVariable name="l2"/>
                    </Target>
                  </JFieldSelection>
                </Operand>
              </JUnaryExpression>
            </JStatementExpression>
            <JStatementExpression line="30">
              <JBinaryExpression line="30" type="long" operator="+=">
                <Lhs>
                  <JFieldSelection line="30" name="test3"/>
                    <Target>
                      <JVariable name="l2"/>
                    </Target>
                  </JFieldSelection>
                </Lhs>
                <Rhs>
                  <JLiteralLong line="30" type="long" value="2L"/>
                </Rhs>
              </JBinaryExpression>
            </JStatementExpression>
            <JStatementExpression line="31">
              <JMessageExpression line="31" name="println">
                <Target>
                  <JFieldSelection line="31" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JFieldSelection line="31" name="test3"/>
                      <Target>
                        <JVariable name="l2"/>
                      </Target>
                    </JFieldSelection>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      <JFieldDeclaration line="34"/>
        <Modifiers>
        </Modifiers>
        <VariableDeclarators>
          <JVariableDeclarator line="34" name="tester" type="long">
            <Initializer>
              <JLiteralLong line="34" type="long" value="3L"/>
            </Initializer>
          </JVariableDeclarator>
        <VariableDeclarators>
      </JFieldDeclaration>
      <JFieldDeclaration line="35"/>
        <Modifiers>
        </Modifiers>
        <VariableDeclarators>
          <JVariableDeclarator line="35" name="tester2" type="int">
            <Initializer>
              <JLiteralInt line="35" type="int" value="3"/>
            </Initializer>
          </JVariableDeclarator>
        <VariableDeclarators>
      </JFieldDeclaration>
      <JMethodDeclaration line="36" name="get2" returnType="int">
        <MethodContext>
          <LocalContext>
            <Entries>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
        </Modifiers>
        <FormalParameters>
        </FormalParameters>
        <Body>
          <JBlock line="36">
            <LocalContext>
              <Entries>
              </Entries>
            </LocalContext>
            <JReturnStatement line="37">
              <JFieldSelection line="37" name="tester2"/>
                <Target>
                  <JThis/>
                </Target>
              </JFieldSelection>
            </JReturnStatement>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      <JMethodDeclaration line="40" name="get" returnType="long">
        <MethodContext>
          <LocalContext>
            <Entries>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
        </Modifiers>
        <FormalParameters>
        </FormalParameters>
        <Body>
          <JBlock line="40">
            <LocalContext>
              <Entries>
              </Entries>
            </LocalContext>
            <JReturnStatement line="41">
              <JFieldSelection line="41" name="tester"/>
                <Target>
                  <JThis/>
                </Target>
              </JFieldSelection>
            </JReturnStatement>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
    <JClassDeclaration line="46" name="Long3" super="java.lang.Object">
      <Modifiers>
      </Modifiers>
      <ClassBlock>
      <JFieldDeclaration line="47"/>
        <Modifiers>
        </Modifiers>
        <VariableDeclarators>
          <JVariableDeclarator line="47" name="test3" type="long">
            <Initializer>
              <JLiteralLong line="47" type="long" value="5L"/>
            </Initializer>
          </JVariableDeclarator>
        <VariableDeclarators>
      </JFieldDeclaration>
      <JMethodDeclaration line="49" name="getLong" returnType="long">
        <MethodContext>
          <LocalContext>
            <Entries>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
        </Modifiers>
        <FormalParameters>
        </FormalParameters>
        <Body>
          <JBlock line="49">
            <LocalContext>
              <Entries>
              </Entries>
            </LocalContext>
            <JReturnStatement line="50">
              <JFieldSelection line="50" name="test3"/>
                <Target>
                  <JThis/>
                </Target>
              </JFieldSelection>
            </JReturnStatement>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

YET ANOTHER MODIFICATION TO QUESTION 1)

After our lecture that covered casts, I realized that I did not consider all of
the requirements for the casting of longs.  I did not include boxing and
un-boxing and I did not include converting char to long and long to char.  Here
are the modifications, tests and results (please note that methods L2I and I2L
were discussed in the original explanation of question 1):

    public Conversions() {
        table = new Hashtable<String, Converter>();

        // Populate the table

        put(Type.CHAR, Type.INT, Converter.Identity);
        put(Type.INT, Type.CHAR, new I2C());
        //added
        put(Type.INT, Type.LONG, new I2L());
        put(Type.LONG, Type.INT, new L2I());
        put(Type.LONG, Type.CHAR, new L2C());
        put(Type.CHAR, Type.LONG, new I2L());//char is int identity.

        // Boxing
        put(Type.LONG, Type.BOXED_LONG, new Boxing(Type.LONG, Type.BOXED_LONG));
        put(Type.CHAR, Type.BOXED_CHAR, new Boxing(Type.CHAR, Type.BOXED_CHAR));
        put(Type.INT, Type.BOXED_INT, new Boxing(Type.INT, Type.BOXED_INT));
        put(Type.BOOLEAN, Type.BOXED_BOOLEAN, new Boxing(Type.BOOLEAN,
                Type.BOXED_BOOLEAN));

        // Un-boxing
        put(Type.BOXED_LONG, Type.LONG, new UnBoxing(Type.BOXED_LONG,
                Type.LONG, "longValue"));//added
        put(Type.BOXED_CHAR, Type.CHAR, new UnBoxing(Type.BOXED_CHAR,
                Type.CHAR, "charValue"));
        put(Type.BOXED_INT, Type.INT, new UnBoxing(Type.BOXED_INT, Type.INT,
                "intValue"));
        put(Type.BOXED_BOOLEAN, Type.BOOLEAN, new UnBoxing(Type.BOXED_BOOLEAN,
                Type.BOOLEAN, "booleanValue"));
    }

class L2C implements Converter {

    /**
     * @inheritDoc
     */

    public void codegen(CLEmitter output) {
        output.addNoArgInstruction(L2I);
        output.addNoArgInstruction(I2C);
    }

}


package pass;

import java.lang.System;
import java.util.ArrayList;
import java.lang.Character;
import java.lang.Long;

public class Casts {
	public static void main(String[] args) {
		int a = (int) 5L;
		long b = (long) 5;
		char c = (char) 97L;
		long d = (long) 'a';
		Character e = (Character) 'a';
		char f = (char) e;
		Long g = (Long) 5L;
		long h = (long) g;
		//ArrayList<Character> f;
		System.out.println(a);
		System.out.println(b);
		System.out.println(c);
		System.out.println(d);
		System.out.println(f);
		System.out.println(h);
	}
}

BUILD SUCCESSFUL
Total time: 3 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Casts.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Casts
5
5
a
97
a
5

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Casts
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Casts.class
  Last modified Dec 6, 2016; size 625 bytes
  MD5 checksum 1c23392055460cc23f39d4abd3434111
public class pass.Casts
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Casts
   #2 = Class              #1             // pass/Casts
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Long               5l
  #14 = Long               97l
  #16 = Utf8               java/lang/Character
  #17 = Class              #16            // java/lang/Character
  #18 = Utf8               valueOf
  #19 = Utf8               (C)Ljava/lang/Character;
  #20 = NameAndType        #18:#19        // valueOf:(C)Ljava/lang/Character;
  #21 = Methodref          #17.#20        // java/lang/Character.valueOf:(C)Ljava/lang/Character;
  #22 = Utf8               charValue
  #23 = Utf8               ()C
  #24 = NameAndType        #22:#23        // charValue:()C
  #25 = Methodref          #17.#24        // java/lang/Character.charValue:()C
  #26 = Utf8               java/lang/Long
  #27 = Class              #26            // java/lang/Long
  #28 = Utf8               (J)Ljava/lang/Long;
  #29 = NameAndType        #18:#28        // valueOf:(J)Ljava/lang/Long;
  #30 = Methodref          #27.#29        // java/lang/Long.valueOf:(J)Ljava/lang/Long;
  #31 = Utf8               longValue
  #32 = Utf8               ()J
  #33 = NameAndType        #31:#32        // longValue:()J
  #34 = Methodref          #27.#33        // java/lang/Long.longValue:()J
  #35 = Utf8               java/lang/System
  #36 = Class              #35            // java/lang/System
  #37 = Utf8               out
  #38 = Utf8               Ljava/io/PrintStream;
  #39 = NameAndType        #37:#38        // out:Ljava/io/PrintStream;
  #40 = Fieldref           #36.#39        // java/lang/System.out:Ljava/io/PrintStream;
  #41 = Utf8               java/io/PrintStream
  #42 = Class              #41            // java/io/PrintStream
  #43 = Utf8               println
  #44 = Utf8               (I)V
  #45 = NameAndType        #43:#44        // println:(I)V
  #46 = Methodref          #42.#45        // java/io/PrintStream.println:(I)V
  #47 = Utf8               (J)V
  #48 = NameAndType        #43:#47        // println:(J)V
  #49 = Methodref          #42.#48        // java/io/PrintStream.println:(J)V
  #50 = Utf8               (C)V
  #51 = NameAndType        #43:#50        // println:(C)V
  #52 = Methodref          #42.#51        // java/io/PrintStream.println:(C)V
{
  public pass.Casts();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=12, args_size=1
         0: ldc2_w        #12                 // long 5l
         3: l2i
         4: istore_1
         5: iconst_5
         6: i2l
         7: lstore_2
         8: ldc2_w        #14                 // long 97l
        11: l2i
        12: i2c
        13: istore        4
        15: bipush        97
        17: i2l
        18: lstore        5
        20: bipush        97
        22: invokestatic  #21                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
        25: astore        7
        27: aload         7
        29: invokevirtual #25                 // Method java/lang/Character.charValue:()C
        32: istore        8
        34: ldc2_w        #12                 // long 5l
        37: invokestatic  #30                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
        40: astore        9
        42: aload         9
        44: invokevirtual #34                 // Method java/lang/Long.longValue:()J
        47: lstore        10
        49: getstatic     #40                 // Field java/lang/System.out:Ljava/io/PrintStream;
        52: iload_1
        53: invokevirtual #46                 // Method java/io/PrintStream.println:(I)V
        56: getstatic     #40                 // Field java/lang/System.out:Ljava/io/PrintStream;
        59: lload_2
        60: invokevirtual #49                 // Method java/io/PrintStream.println:(J)V
        63: getstatic     #40                 // Field java/lang/System.out:Ljava/io/PrintStream;
        66: iload         4
        68: invokevirtual #52                 // Method java/io/PrintStream.println:(C)V
        71: getstatic     #40                 // Field java/lang/System.out:Ljava/io/PrintStream;
        74: lload         5
        76: invokevirtual #49                 // Method java/io/PrintStream.println:(J)V
        79: getstatic     #40                 // Field java/lang/System.out:Ljava/io/PrintStream;
        82: iload         8
        84: invokevirtual #52                 // Method java/io/PrintStream.println:(C)V
        87: getstatic     #40                 // Field java/lang/System.out:Ljava/io/PrintStream;
        90: lload         10
        92: invokevirtual #49                 // Method java/io/PrintStream.println:(J)V
        95: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- -a tests\pass\Casts.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Casts.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>Character</Entry>
      <Entry>java.lang.System</Entry>
      <Entry>ArrayList</Entry>
      <Entry>Casts</Entry>
      <Entry>String</Entry>
      <Entry>System</Entry>
      <Entry>java.util.ArrayList</Entry>
      <Entry>java.lang.Character</Entry>
      <Entry>java.lang.Long</Entry>
      <Entry>pass.Casts</Entry>
      <Entry>Long</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>java.lang.String</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
    <Import name="java.util.ArrayList"/>
    <Import name="java.lang.Character"/>
    <Import name="java.lang.Long"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="8" name="Casts" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="9" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="9" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="9">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
                <Entry name="b" offset="2"/>
                <Entry name="c" offset="4"/>
                <Entry name="d" offset="5"/>
                <Entry name="e" offset="7"/>
                <Entry name="f" offset="8"/>
                <Entry name="g" offset="9"/>
                <Entry name="h" offset="10"/>
              </Entries>
            </LocalContext>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="10" name="a" type="int">
                  <Initializer>
                    <JCastOp line="10" type="int"/>
                      <Expression>
                        <JLiteralLong line="10" type="long" value="5L"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="11" name="b" type="long">
                  <Initializer>
                    <JCastOp line="11" type="long"/>
                      <Expression>
                        <JLiteralInt line="11" type="int" value="5"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="12" name="c" type="char">
                  <Initializer>
                    <JCastOp line="12" type="char"/>
                      <Expression>
                        <JLiteralLong line="12" type="long" value="97L"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="13" name="d" type="long">
                  <Initializer>
                    <JCastOp line="13" type="long"/>
                      <Expression>
                        <JLiteralChar line="13" type="char" value="&#39;a&#39;"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="14" name="e" type="Character">
                  <Initializer>
                    <JCastOp line="14" type="java.lang.Character"/>
                      <Expression>
                        <JLiteralChar line="14" type="char" value="&#39;a&#39;"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="15" name="f" type="char">
                  <Initializer>
                    <JCastOp line="15" type="char"/>
                      <Expression>
                        <JVariable name="e"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="16" name="g" type="Long">
                  <Initializer>
                    <JCastOp line="16" type="java.lang.Long"/>
                      <Expression>
                        <JLiteralLong line="16" type="long" value="5L"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="17" name="h" type="long">
                  <Initializer>
                    <JCastOp line="17" type="long"/>
                      <Expression>
                        <JVariable name="g"/>
                      </Expression>
                    </JCastOp>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JStatementExpression line="19">
              <JMessageExpression line="19" name="println">
                <Target>
                  <JFieldSelection line="19" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="20">
              <JMessageExpression line="20" name="println">
                <Target>
                  <JFieldSelection line="20" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="b"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="21">
              <JMessageExpression line="21" name="println">
                <Target>
                  <JFieldSelection line="21" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="c"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="22">
              <JMessageExpression line="22" name="println">
                <Target>
                  <JFieldSelection line="22" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="d"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="23">
              <JMessageExpression line="23" name="println">
                <Target>
                  <JFieldSelection line="23" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="f"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JStatementExpression line="24">
              <JMessageExpression line="24" name="println">
                <Target>
                  <JFieldSelection line="24" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="h"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

Question 7 (labels))

First the labels have to be parsed.

        } else if (isLabel()) {
        	String name2 = null;
        	mustBe(IDENTIFIER);
	    	name2 = scanner.previousToken().image();
        	mustBe(COLON);
        	JStatement state = statement();
            return new JLabel(line, name2, state);
        } else { // Must be a statementExpression
            JStatement statement = statementExpression();
            mustBe(SEMI);
            return statement;
        }
    }
    
    public boolean isLabel() {
    	boolean isLabel = false;
    	scanner.recordPosition();
    	if (have(IDENTIFIER)){
    		if (have(COLON)){
    			isLabel = true;
    		}
    	}
    	scanner.returnToPosition();
    	return isLabel;
    }

The thing that needs to be understood about labels is they require a jvm label
in order to define a place of exit.  This requires an extra parameter to passed
when codegen is called.

In parser, create an ArrayList<JLabel> as a new field.  This will be passed
as an argument to each JLabel, so every JLabel prior to it can be referenced.
The jvmLabel for each JLabel can be accessed via getJVMLabel.

If you have a loop with a label and another loop inside of it, you will need to
notify the regular codegen that label codegen needs to be used.  Therefore, it
is necessary to pass another ArrayList<JLabel> argument for every statement
uses a label.

It is important to recognize that labels are statement dependent.  In other
words, every JStatement object has to deal labels individually.

Since while already existed, this was the first loop that I tested.  Changes
had to be made to parser and a new JLabel class had to be made:

A new argument had to be added to parser the labs2 argument below was
initialized in Parser.java

public void codegen(CLEmitter output) {
    	if (this.labs2.size() >= 1) {
    		//System.out.println("hasLabel");
    		this.labelCodegen(output, jvmLabel2, label2, labs2);

Then a new method was created in JWhileStatement:

   public void labelCodegen(CLEmitter output, String jvmLabel, String label, ArrayList<JLabel> labs) {
    	this.jvmLabel2 = jvmLabel;
    	this.label2 = label; 
    	this.labs2 = labs;
    	this.hasLabel = true;
    	//System.out.println("in codegen");
    	
    	// Need two labels
        String test = output.createLabel();
        String out = output.createLabel();

        // Branch out of the loop on the test condition
        // being false
        output.addLabel(test);
        condition.codegen(output, out, false);

        // Codegen body
        if (body instanceof JBlock){
        	//System.out.println("Iniside body");
        	JBlock body2 = (JBlock) body;
        	for (JStatement statement : body2.statements()) {
        		if (statement instanceof JBreakStatement) {
        			//System.out.println("Is a break");
        			JBreakStatement state = (JBreakStatement) statement;
        			if (!state.hasLabel()) {
        				//System.out.println("out");
        				output.addBranchInstruction(GOTO, out);
        			} else {
        				//System.out.println(labs.get(0));
        				if (labs.size() == 1) {
        					//System.out.println("yes");
        					output.addBranchInstruction(GOTO, labs.get(0).getJVMLabel());
        				} else { //there is more than one label
        					//System.out.println(state.getLabel());
        					for (JLabel foo : labs) {
        						System.out.println("state " + state.getLabel());
        						System.out.println("foo " + foo.getLabel());
        						if (state.getLabel().equals(foo.getLabel())) {
        							System.out.println("in if foo " + foo.getLabel());
        							output.addBranchInstruction(GOTO, foo.getJVMLabel());
        						}
        					}
        				}
        			}
        		} else {
        			//System.out.println(statement);
        			statement.codegen(output);
        		}
            }
        } else {
        	if (body instanceof JBreakStatement) {
        		output.addBranchInstruction(GOTO, out);
        	} else {
        		body.codegen(output);
        	}
        }
        
        //body.codegen(output);

        // Unconditional jump back up to test
        output.addBranchInstruction(GOTO, test);

        // The label below and outside the loop
        output.addLabel(out);
    }

Here is the new Labels class:

//modification of JLabel by Bob Wilson

package jminusminus;

import static jminusminus.CLConstants.*;

import java.util.*;

/**
 * The AST node for a return-statement. If the enclosing method
 * in non-void, then there is a value to return, so we keep track
 * of the expression denoting that value and its type.
 */

class JLabel
    extends JStatement {

    
    private String expr;

    private Context labelContext;
    
    private String jvmLabel;
    
    private JStatement state;
    
    private ArrayList<JLabel> labs;
    /**
     * Construct an AST node for a return-statement given its
     * line number, and the expression that is returned.
     * 
     * @param line
     *                line in which the return-statement appears
     *                in the source file.
     * @param expr
     *                the returned expression.
     */

    public JLabel(int line, String expr, JStatement state, ArrayList<JLabel> labs) {
        super(line);
        this.state = state;
        this.expr = expr;
        this.labs = labs;
    }
    
    public String getLabel() {
    	return this.expr;
    }
    
    public String getJVMLabel() {
    	return jvmLabel;
    }

    /**
     * Analysis distinguishes between our being in a constructor
     * or in a regular method in checking return types. In the
     * case of a return expression, analyze it and check types.
     * Determine the (possibly void) return type.
     * 
     * @param context
     *                context in which names are resolved.
     * @return the analyzed (and possibly rewritten) AST subtree.
     */

    public JStatement analyze(Context context) {
    	state = (JStatement) state.analyze(context);
        return this;
    }

    /**
     * Generate code for the return statement. In the case of
     * void method types, generate a simple (void) return. In the
     * case of a return expression, generate code to load that
     * onto the stack and then generate the appropriate return
     * instruction.
     * 
     * @param output
     *                the code emitter (basically an abstraction
     *                for producing the .class file).
     */

    public void codegen(CLEmitter output) {
    	jvmLabel = output.createLabel();
    	/* This is a special form of codegen that is called
    	 * for a loop (DoWhile, While, For) when a label is
    	 * used
    	 */
    	//state.codegen(output);
    	state.labelCodegen(output, jvmLabel, expr, labs);
    	output.addLabel(jvmLabel);
    }

    /**
     * @inheritDoc
     */

    public void writeToStdOut(PrettyPrinter p) {
//        if (expr != null) {
            p.printf("<JLabel line=\"%d\">\n", line());
            p.indentRight();
            p.printf("%s\n", expr);
            //expr.writeToStdOut(p);
            state.writeToStdOut(p);
            p.indentLeft();
            p.printf("</JLabel>\n");
//        } else {
//            p.printf("<JBreakStatement line=\"%d\"/>\n", line());
//        }
    }
}

Tests:

package pass;

import java.lang.System;

public class Labels {
	public static void main(String[] args){
		int a = 9;
		test:
		while (a > 5) {
			a--;
			while (a > 5) {
				System.out.println("inside inner loop");
				break test;
			}
		}
		
		System.out.println(a);
		
		test2:
			while (a > 5) {
				a--;
				test3:
				while (a > 5) {
					System.out.println("inside inner loop");
					break test2;
				}
			}
		System.out.println(a);

	}
}

Results:

BUILD SUCCESSFUL
Total time: 5 seconds

C:\Users\bwils_000\Desktop\eclipse projects\j-->bin\j-- tests\pass\Labels.java

C:\Users\bwils_000\Desktop\eclipse projects\j-->java pass.Labels
inside inner loop
8
inside inner loop
7

C:\Users\bwils_000\Desktop\eclipse projects\j-->javap -verbose pass.Labels
Classfile /C:/Users/bwils_000/Desktop/eclipse projects/j--/pass/Labels.class
  Last modified Dec 11, 2016; size 433 bytes
  MD5 checksum f9aa5912649471c4cf03bb20dcf41be0
public class pass.Labels
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC
Constant pool:
   #1 = Utf8               pass/Labels
   #2 = Class              #1             // pass/Labels
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = NameAndType        #5:#6          // "<init>":()V
   #8 = Methodref          #4.#7          // java/lang/Object."<init>":()V
   #9 = Utf8               Code
  #10 = Utf8               main
  #11 = Utf8               ([Ljava/lang/String;)V
  #12 = Utf8               java/lang/System
  #13 = Class              #12            // java/lang/System
  #14 = Utf8               out
  #15 = Utf8               Ljava/io/PrintStream;
  #16 = NameAndType        #14:#15        // out:Ljava/io/PrintStream;
  #17 = Fieldref           #13.#16        // java/lang/System.out:Ljava/io/PrintStream;
  #18 = Utf8               inside inner loop
  #19 = String             #18            // inside inner loop
  #20 = Utf8               java/io/PrintStream
  #21 = Class              #20            // java/io/PrintStream
  #22 = Utf8               println
  #23 = Utf8               (Ljava/lang/String;)V
  #24 = NameAndType        #22:#23        // println:(Ljava/lang/String;)V
  #25 = Methodref          #21.#24        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #26 = Utf8               (I)V
  #27 = NameAndType        #22:#26        // println:(I)V
  #28 = Methodref          #21.#27        // java/io/PrintStream.println:(I)V
{
  public pass.Labels();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: bipush        9
         2: istore_1
         3: iload_1
         4: iconst_5
         5: if_icmple     33
         8: iinc          1, -1
        11: iload_1
        12: iconst_5
        13: if_icmple     30
        16: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        19: ldc           #19                 // String inside inner loop
        21: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        24: goto          33
        27: goto          11
        30: goto          3
        33: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        36: iload_1
        37: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
        40: iload_1
        41: iconst_5
        42: if_icmple     70
        45: iinc          1, -1
        48: iload_1
        49: iconst_5
        50: if_icmple     67
        53: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        56: ldc           #19                 // String inside inner loop
        58: invokevirtual #25                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        61: goto          70
        64: goto          48
        67: goto          40
        70: getstatic     #17                 // Field java/lang/System.out:Ljava/io/PrintStream;
        73: iload_1
        74: invokevirtual #28                 // Method java/io/PrintStream.println:(I)V
        77: return
}

C:\Users\bwils_000\Desktop\eclipse projects\j-->

bin\j-- -a tests\pass\Labels.java
<?xml version="1.0" encoding="utf-8"?>
<JCompilationUnit line="1">
  <Source fileName="tests\pass\Labels.java"/>
  <CompilationUnitContext>
    <Entries>
      <Entry>java.lang.System</Entry>
      <Entry>pass.Labels</Entry>
      <Entry>Object</Entry>
      <Entry>java.lang.Object</Entry>
      <Entry>Labels</Entry>
      <Entry>String</Entry>
      <Entry>java.lang.String</Entry>
      <Entry>System</Entry>
    </Entries>
  </CompilationUnitContext>
  <Package name="pass"/>
  <Imports>
    <Import name="java.lang.System"/>
  </Imports>
  <TypeDeclarations>
    <JClassDeclaration line="5" name="Labels" super="java.lang.Object">
      <Modifiers>
        <Modifier name="public"/>
      </Modifiers>
      <ClassBlock>
      <JMethodDeclaration line="6" name="main" returnType="void">
        <MethodContext>
          <LocalContext>
            <Entries>
              <Entry name="args" offset="0"/>
            </Entries>
          </LocalContext>
        </MethodContext>
        <Modifiers>
          <Modifier name="public"/>
          <Modifier name="static"/>
        </Modifiers>
        <FormalParameters>
          <JFormalParameter line="6" name="args" type="java.lang.String[]"/>
        </FormalParameters>
        <Body>
          <JBlock line="6">
            <LocalContext>
              <Entries>
                <Entry name="a" offset="1"/>
              </Entries>
            </LocalContext>
            <JVariableDeclaration>
              <Modifiers>
              </Modifiers>
              <VariableDeclarators>
                <JVariableDeclarator line="7" name="a" type="int">
                  <Initializer>
                    <JLiteralInt line="7" type="int" value="9"/>
                  </Initializer>
                </JVariableDeclarator>
              </VariableDeclarators>
            </JVariableDeclaration>
            <JLabel line="8">
              test
              <JWhileStatement line="9">
                <TestExpression>
                  <JBinaryExpression line="9" type="boolean" operator="&gt;">
                    <Lhs>
                      <JVariable name="a"/>
                    </Lhs>
                    <Rhs>
                      <JLiteralInt line="9" type="int" value="5"/>
                    </Rhs>
                  </JBinaryExpression>
                </TestExpression>
                <Body>
                  <JBlock line="9">
                    <LocalContext>
                      <Entries>
                      </Entries>
                    </LocalContext>
                    <JStatementExpression line="10">
                      <JUnaryExpression line="10" type="int" operator="post--">
                        <Operand>
                          <JVariable name="a"/>
                        </Operand>
                      </JUnaryExpression>
                    </JStatementExpression>
                    <JWhileStatement line="11">
                      <TestExpression>
                        <JBinaryExpression line="11" type="boolean" operator="&gt;">
                          <Lhs>
                            <JVariable name="a"/>
                          </Lhs>
                          <Rhs>
                            <JLiteralInt line="11" type="int" value="5"/>
                          </Rhs>
                        </JBinaryExpression>
                      </TestExpression>
                      <Body>
                        <JBlock line="11">
                          <LocalContext>
                            <Entries>
                            </Entries>
                          </LocalContext>
                          <JStatementExpression line="12">
                            <JMessageExpression line="12" name="println">
                              <Target>
                                <JFieldSelection line="12" name="out"/>
                                  <Target>
                                    <JVariable name="System"/>
                                  </Target>
                                </JFieldSelection>
                              </Target>
                              <Arguments>
                                <Argument>
                                  <JLiteralString line="12" type="java.lang.String" value="&quot;inside inner loop&quot;"/>
                                </Argument>
                              </Arguments>
                            </JMessageExpression>
                          </JStatementExpression>
                          <JBreakStatement line="13">
                            test
                          </JBreakStatement>
                          <JEmptyStatement line="13"/>
                        </JBlock>
                      </Body>
                    </JWhileStatement>
                  </JBlock>
                </Body>
              </JWhileStatement>
            </JLabel>
            <JStatementExpression line="17">
              <JMessageExpression line="17" name="println">
                <Target>
                  <JFieldSelection line="17" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
            <JLabel line="19">
              test2
              <JWhileStatement line="20">
                <TestExpression>
                  <JBinaryExpression line="20" type="boolean" operator="&gt;">
                    <Lhs>
                      <JVariable name="a"/>
                    </Lhs>
                    <Rhs>
                      <JLiteralInt line="20" type="int" value="5"/>
                    </Rhs>
                  </JBinaryExpression>
                </TestExpression>
                <Body>
                  <JBlock line="20">
                    <LocalContext>
                      <Entries>
                      </Entries>
                    </LocalContext>
                    <JStatementExpression line="21">
                      <JUnaryExpression line="21" type="int" operator="post--">
                        <Operand>
                          <JVariable name="a"/>
                        </Operand>
                      </JUnaryExpression>
                    </JStatementExpression>
                    <JLabel line="22">
                      test3
                      <JWhileStatement line="23">
                        <TestExpression>
                          <JBinaryExpression line="23" type="boolean" operator="&gt;">
                            <Lhs>
                              <JVariable name="a"/>
                            </Lhs>
                            <Rhs>
                              <JLiteralInt line="23" type="int" value="5"/>
                            </Rhs>
                          </JBinaryExpression>
                        </TestExpression>
                        <Body>
                          <JBlock line="23">
                            <LocalContext>
                              <Entries>
                              </Entries>
                            </LocalContext>
                            <JStatementExpression line="24">
                              <JMessageExpression line="24" name="println">
                                <Target>
                                  <JFieldSelection line="24" name="out"/>
                                    <Target>
                                      <JVariable name="System"/>
                                    </Target>
                                  </JFieldSelection>
                                </Target>
                                <Arguments>
                                  <Argument>
                                    <JLiteralString line="24" type="java.lang.String" value="&quot;inside inner loop&quot;"/>
                                  </Argument>
                                </Arguments>
                              </JMessageExpression>
                            </JStatementExpression>
                            <JBreakStatement line="25">
                              test2
                            </JBreakStatement>
                            <JEmptyStatement line="25"/>
                          </JBlock>
                        </Body>
                      </JWhileStatement>
                    </JLabel>
                  </JBlock>
                </Body>
              </JWhileStatement>
            </JLabel>
            <JStatementExpression line="28">
              <JMessageExpression line="28" name="println">
                <Target>
                  <JFieldSelection line="28" name="out"/>
                    <Target>
                      <JVariable name="System"/>
                    </Target>
                  </JFieldSelection>
                </Target>
                <Arguments>
                  <Argument>
                    <JVariable name="a"/>
                  </Argument>
                </Arguments>
              </JMessageExpression>
            </JStatementExpression>
          </JBlock>
        </Body>
      </JMethodDeclaration>
      </ClassBlock>
    </JClassDeclaration>
  </TypeDeclarations>
</JCompilationUnit>

C:\Users\bwils_000\Desktop\eclipse projects\j-->

